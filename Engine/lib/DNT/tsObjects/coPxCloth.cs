// Copyright (C) 2012 Winterleaf Entertainment L,L,C.
// 
// THE SOFTW ARE IS PROVIDED ON AN “ AS IS” BASIS, WITHOUT W ARRANTY OF ANY KIND,
// INCLUDING WITHOUT LIMIT ATION THE W ARRANTIES OF MERCHANT ABILITY, FITNESS
// FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT . THE ENTIRE RISK AS TO THE
// QUALITY AND PERFORMANCE OF THE SOFTW ARE IS THE RESPONSIBILITY OF LICENSEE.
// SHOULD THE SOFTW ARE PROVE DEFECTIVE IN ANY RESPECT , LICENSEE AND NOT LICEN -
// SOR OR ITS SUPPLIERS OR RESELLERS ASSUMES THE ENTIRE COST OF AN Y SERVICE AND
// REPAIR. THIS DISCLAIMER OF W ARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS
// AGREEMENT. NO USE OF THE SOFTW ARE IS AUTHORIZED HEREUNDER EXCEPT UNDER
// THIS DISCLAIMER.
// 
// The use of the WinterLeaf Entertainment LLC DotNetT orque (“DNT ”) and DotNetT orque
// Customizer (“DNTC”)is governed by this license agreement (“ Agreement”).
// 
// R E S T R I C T I O N S
// 
// (a) Licensee may not: (i) create any derivative works of DNTC, including but not
// limited to translations, localizations, technology add-ons, or game making software
// other than Games; (ii) reverse engineer , or otherwise attempt to derive the algorithms
// for DNT or DNTC (iii) redistribute, encumber , sell, rent, lease, sublicense, or otherwise
// transfer rights to  DNTC; or (iv) remove or alter any tra demark, logo, copyright
// or other proprietary notices, legends, symbols or labels in DNT or DNTC; or (iiv) use
// the Software to develop or distribute any software that compete s with the Software
// without WinterLeaf Entertainment’s prior written consent; or (i iiv) use the Software for
// any illegal purpose.
// (b) Licensee may not distribute the DNTC in any manner.
// 
// LI C E N S E G R A N T .
// This license allows companies of any size, government entities or individuals to cre -
// ate, sell, rent, lease, or otherwise profit commercially from, games using executables
// created from the source code of DNT
// 
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// THE SOURCE CODE GENERATED BY DNTC CAN BE  DISTRIBUTED PUBLICLY PROVIDED THAT THE 
// DISTRIBUTOR PROVIDES  THE GENERATE SOURCE CODE FREE OF CHARGE.
// 
// THIS SOURCE CODE (DNT) CAN BE DISTRIBUTED PUBLICLY PROVIDED THAT THE DISTRIBUTOR 
// PROVIDES  THE SOURCE CODE (DNT) FREE OF CHARGE.
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// 
// Please visit http://www.winterleafentertainment.com for more information about the project and latest updates.
// 
// 
// 

#region

using System;
using System.ComponentModel;
using WinterLeaf.Classes;
using WinterLeaf.Containers;
using WinterLeaf.Enums;

#endregion

namespace WinterLeaf.tsObjects
    {
    /// <summary>
    /// 
    /// </summary>
    internal class tsObjectConvertercoPxCloth : TypeConverter
        {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="sourceType"></param>
        /// <returns></returns>
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
            {
            return (typeof (string) == sourceType);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="culture"></param>
        /// <param name="value"></param>
        /// <returns></returns>
        public override object ConvertFrom(ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value)
            {
            if (value is string)
                {
                return new coPxCloth(value as string);
                }

            return null;
            }
        }


    /// <summary>
    /// 
    /// </summary>
    [TypeConverter(typeof (tsObjectConvertercoPxCloth))]
    public class coPxCloth : coGameBase
        {
        private Point2I _samples;
        private Point2F _size;

        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
        public coPxCloth(string simobjectid) : base(simobjectid)
            {
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
        public coPxCloth(uint simobjectid) : base(simobjectid)
            {
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
        public coPxCloth(int simobjectid) : base(simobjectid)
            {
            }


        /// <summary>
        /// @brief Optional way to specify cloth verts that will be attached to the world position    it is created at.\n\n 
        /// </summary>
        public PxClothAttachment attachments
            {
            get { return (PxClothAttachment) Enum.Parse(typeof (PxClothAttachment), dnTorque.self.GetVar(_mSimObjectId + ".attachments")); }
            set { dnTorque.self.SetVar(_mSimObjectId + ".attachments", value.ToString()); }
            }

        /// <summary>
        /// @brief Enables or disables bending resistance.\n\n   Set the bending resistance through PxCloth::bendingStiffness. 
        /// </summary>
        public bool bending
            {
            get { return dnTorque.self.GetVar(_mSimObjectId + ".bending").AsBool(); }
            set { dnTorque.self.SetVar(_mSimObjectId + ".bending", value.AsString()); }
            }

        /// <summary>
        /// @brief Bending stiffness of the cloth in the range 0 to 1.\n\n 
        /// </summary>
        public float bendingStiffness
            {
            get { return dnTorque.self.GetVar(_mSimObjectId + ".bendingStiffness").AsFloat(); }
            set { dnTorque.self.SetVar(_mSimObjectId + ".bendingStiffness", value.AsString()); }
            }

        /// <summary>
        /// @brief Enable/disable damping of internal velocities.\n\n 
        /// </summary>
        public bool damping
            {
            get { return dnTorque.self.GetVar(_mSimObjectId + ".damping").AsBool(); }
            set { dnTorque.self.SetVar(_mSimObjectId + ".damping", value.AsString()); }
            }

        /// <summary>
        /// @brief Spring damping of the cloth in the range 0 to 1.\n\n 
        /// </summary>
        public float dampingCoefficient
            {
            get { return dnTorque.self.GetVar(_mSimObjectId + ".dampingCoefficient").AsFloat(); }
            set { dnTorque.self.SetVar(_mSimObjectId + ".dampingCoefficient", value.AsString()); }
            }

        /// <summary>
        /// @brief Density of the cloth (Mass per Area).\n\n 
        /// </summary>
        public float density
            {
            get { return dnTorque.self.GetVar(_mSimObjectId + ".density").AsFloat(); }
            set { dnTorque.self.SetVar(_mSimObjectId + ".density", value.AsString()); }
            }

        /// <summary>
        /// @brief Friction coefficient in the range 0 to 1.\n\n	  Defines the damping of the velocities of cloth particles that are in contact. 
        /// </summary>
        public float friction
            {
            get { return dnTorque.self.GetVar(_mSimObjectId + ".friction").AsFloat(); }
            set { dnTorque.self.SetVar(_mSimObjectId + ".friction", value.AsString()); }
            }

        /// <summary>
        /// @brief Name of the material to render.\n\n 
        /// </summary>
        public String material
            {
            get { return dnTorque.self.GetVar(_mSimObjectId + ".material").AsString(); }
            set { dnTorque.self.SetVar(_mSimObjectId + ".material", value.AsString()); }
            }

        /// <summary>
        /// @brief The number of cloth vertices in width and length.\n\n   At least two verts should be defined.\n\n
        /// </summary>
        public Point2I samples
            {
            get
                {
                if (_samples != null)
                    _samples.DetachAllEvents();
                _samples = dnTorque.self.GetVar(_mSimObjectId + ".samples").AsPoint2I();
                _samples.OnChangeNotification += _samples_OnChangeNotification;
                return _samples;
                }
            set { dnTorque.self.SetVar(_mSimObjectId + ".samples", value.AsString()); }
            }

        /// <summary>
        /// @brief Enables or disables self-collision handling within a single piece of cloth.\n\n 
        /// </summary>
        public bool selfCollision
            {
            get { return dnTorque.self.GetVar(_mSimObjectId + ".selfCollision").AsBool(); }
            set { dnTorque.self.SetVar(_mSimObjectId + ".selfCollision", value.AsString()); }
            }

        /// <summary>
        /// @brief The width and height of the cloth.\n\n 
        /// </summary>
        public Point2F size
            {
            get
                {
                if (_size != null)
                    _size.DetachAllEvents();
                _size = dnTorque.self.GetVar(_mSimObjectId + ".size").AsPoint2F();
                _size.OnChangeNotification += _size_OnChangeNotification;
                return _size;
                }
            set { dnTorque.self.SetVar(_mSimObjectId + ".size", value.AsString()); }
            }

        /// <summary>
        /// @brief Value representing how thick the cloth is.\n\n   The thickness is usually a fraction of the overall extent of the cloth and 	  should not be set to a value greater than that. A good value is the maximal 	  distance between two adjacent cloth particles in their rest pose. Visual 	  artifacts or collision problems may appear if the thickness is too small.\n\n 
        /// </summary>
        public float thickness
            {
            get { return dnTorque.self.GetVar(_mSimObjectId + ".thickness").AsFloat(); }
            set { dnTorque.self.SetVar(_mSimObjectId + ".thickness", value.AsString()); }
            }

        /// <summary>
        /// @brief Not supported in current release (according to PhysX docs).\n\n	  Enables or disables collision detection of cloth triangles against the scene. 	  If not set, only collisions of cloth particles are detected. If set,    collisions of cloth triangles are detected as well. 
        /// </summary>
        public bool triangleCollision
            {
            get { return dnTorque.self.GetVar(_mSimObjectId + ".triangleCollision").AsBool(); }
            set { dnTorque.self.SetVar(_mSimObjectId + ".triangleCollision", value.AsString()); }
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator ==(coPxCloth ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return object.ReferenceEquals(simobjectid, null);
            return ts.Equals(simobjectid);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public override int GetHashCode()
            {
            throw new NotImplementedException();
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        public override bool Equals(object obj)
            {
            return (this._mSimObjectId == (string) myReflections.ChangeType(obj, typeof (string)));
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator !=(coPxCloth ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return !object.ReferenceEquals(simobjectid, null);
            return !ts.Equals(simobjectid);
            }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator string(coPxCloth ts)
            {
            return ts._mSimObjectId;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coPxCloth(string ts)
            {
            return new coPxCloth(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator int(coPxCloth ts)
            {
            int i;
            return int.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coPxCloth(int ts)
            {
            return new coPxCloth(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator uint(coPxCloth ts)
            {
            uint i;
            return uint.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coPxCloth(uint ts)
            {
            return new coPxCloth(ts);
            }

        private void _samples_OnChangeNotification(object o, Notifier.ChangeNotificationEventArgs e)
            {
            dnTorque.self.SetVar(_mSimObjectId + ".samples", e.NewValue);
            }

        private void _size_OnChangeNotification(object o, Notifier.ChangeNotificationEventArgs e)
            {
            dnTorque.self.SetVar(_mSimObjectId + ".size", e.NewValue);
            }
        }
    }