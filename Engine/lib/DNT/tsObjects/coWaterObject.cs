
// Copyright (C) 2012 Winterleaf Entertainment L,L,C.
// 
// THE SOFTW ARE IS PROVIDED ON AN “ AS IS” BASIS, WITHOUT W ARRANTY OF ANY KIND,
// INCLUDING WITHOUT LIMIT ATION THE W ARRANTIES OF MERCHANT ABILITY, FITNESS
// FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT . THE ENTIRE RISK AS TO THE
// QUALITY AND PERFORMANCE OF THE SOFTW ARE IS THE RESPONSIBILITY OF LICENSEE.
// SHOULD THE SOFTW ARE PROVE DEFECTIVE IN ANY RESPECT , LICENSEE AND NOT LICEN -
// SOR OR ITS SUPPLIERS OR RESELLERS ASSUMES THE ENTIRE COST OF AN Y SERVICE AND
// REPAIR. THIS DISCLAIMER OF W ARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS
// AGREEMENT. NO USE OF THE SOFTW ARE IS AUTHORIZED HEREUNDER EXCEPT UNDER
// THIS DISCLAIMER.
// 
// The use of the WinterLeaf Entertainment LLC DotNetT orque (“DNT ”) and DotNetT orque
// Customizer (“DNTC”)is governed by this license agreement (“ Agreement”).
// 
// R E S T R I C T I O N S
// 
// (a) Licensee may not: (i) create any derivative works of DNTC, including but not
// limited to translations, localizations, technology add-ons, or game making software
// other than Games; (ii) reverse engineer , or otherwise attempt to derive the algorithms
// for DNT or DNTC (iii) redistribute, encumber , sell, rent, lease, sublicense, or otherwise
// transfer rights to  DNTC; or (iv) remove or alter any tra demark, logo, copyright
// or other proprietary notices, legends, symbols or labels in DNT or DNTC; or (iiv) use
// the Software to develop or distribute any software that compete s with the Software
// without WinterLeaf Entertainment’s prior written consent; or (i iiv) use the Software for
// any illegal purpose.
// (b) Licensee may not distribute the DNTC in any manner.
// 
// LI C E N S E G R A N T .
// This license allows companies of any size, government entities or individuals to cre -
// ate, sell, rent, lease, or otherwise profit commercially from, games using executables
// created from the source code of DNT
// 
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// THE SOURCE CODE GENERATED BY DNTC CAN BE  DISTRIBUTED PUBLICLY PROVIDED THAT THE 
// DISTRIBUTOR PROVIDES  THE GENERATE SOURCE CODE FREE OF CHARGE.
// 
// THIS SOURCE CODE (DNT) CAN BE DISTRIBUTED PUBLICLY PROVIDED THAT THE DISTRIBUTOR 
// PROVIDES  THE SOURCE CODE (DNT) FREE OF CHARGE.
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// 
// Please visit http://www.winterleafentertainment.com for more information about the project and latest updates.

#region
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using WinterLeaf.Classes;
using WinterLeaf.Containers;
using WinterLeaf.Enums;
using System.ComponentModel;
#endregion

namespace WinterLeaf.tsObjects
    {
    /// <summary>
    /// 
    /// </summary>
    internal class tsObjectConvertercoWaterObject : TypeConverter
        {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="sourceType"></param>
        /// <returns></returns>
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
            {
            return (typeof(string) == sourceType);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="culture"></param>
        /// <param name="value"></param>
        /// <returns></returns>
        public override object ConvertFrom(ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value)
            {
            if (value is string)
                {
                return new coWaterObject(value as string);
                }

            return null;
            }
        }

      
    /// <summary>
    /// 
    /// </summary>
    [TypeConverter(typeof(tsObjectConvertercoWaterObject))]
    public class coWaterObject: coSceneObject
{
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
public coWaterObject(string simobjectid) : base(simobjectid){ }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
public coWaterObject(uint simobjectid): base(simobjectid){ }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
public coWaterObject(int simobjectid): base(simobjectid){ }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator ==(coWaterObject ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return object.ReferenceEquals(simobjectid, null);
            return ts.Equals(simobjectid);


            }
  /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public override int GetHashCode()
            {
            throw new NotImplementedException();
            }
  /// <summary>
        /// 
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        public override bool Equals(object obj)
            {
            
            return (this._mSimObjectId ==(string)myReflections.ChangeType( obj,typeof(string)));
            }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator !=(coWaterObject ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return !object.ReferenceEquals(simobjectid, null);
            return !ts.Equals(simobjectid);

            }


            /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator string( coWaterObject ts)
            {
            return ts._mSimObjectId;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coWaterObject(string ts)
            {
            return new coWaterObject(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator int( coWaterObject ts)
            {
            int i;
            return int.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coWaterObject(int ts)
            {
            return new coWaterObject(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator uint( coWaterObject ts)
            {
            uint i;
            return uint.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coWaterObject(uint ts)
            {
            return new coWaterObject(ts);
            }
public ColorI baseColor
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".baseColor").AsColorI();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".baseColor", value.AsString());
          }
       }
public float clarity
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".clarity").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".clarity", value.AsString());
          }
       }
public String cubemap
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".cubemap").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".cubemap", value.AsString());
          }
       }
public float density
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".density").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".density", value.AsString());
          }
       }
public float depthGradientMax
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".depthGradientMax").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".depthGradientMax", value.AsString());
          }
       }
public String depthGradientTex
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".depthGradientTex").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".depthGradientTex", value.AsString());
          }
       }
public float distortEndDist
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".distortEndDist").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".distortEndDist", value.AsString());
          }
       }
public float distortFullDepth
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".distortFullDepth").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".distortFullDepth", value.AsString());
          }
       }
public float distortStartDist
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".distortStartDist").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".distortStartDist", value.AsString());
          }
       }
public bool emissive
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".emissive").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".emissive", value.AsString());
          }
       }
public float foamAmbientLerp
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".foamAmbientLerp").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".foamAmbientLerp", value.AsString());
          }
       }
public Point2F foamDir
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".foamDir").AsPoint2F();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".foamDir", value.AsString());
          }
       }
public float foamMaxDepth
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".foamMaxDepth").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".foamMaxDepth", value.AsString());
          }
       }
public float foamOpacity
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".foamOpacity").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".foamOpacity", value.AsString());
          }
       }
public float foamRippleInfluence
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".foamRippleInfluence").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".foamRippleInfluence", value.AsString());
          }
       }
public float foamSpeed
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".foamSpeed").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".foamSpeed", value.AsString());
          }
       }
public String foamTex
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".foamTex").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".foamTex", value.AsString());
          }
       }
public Point2F foamTexScale
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".foamTexScale").AsPoint2F();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".foamTexScale", value.AsString());
          }
       }
public float fresnelBias
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".fresnelBias").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".fresnelBias", value.AsString());
          }
       }
public float fresnelPower
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".fresnelPower").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".fresnelPower", value.AsString());
          }
       }
public bool fullReflect
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".fullReflect").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".fullReflect", value.AsString());
          }
       }
public String liquidType
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".liquidType").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".liquidType", value.AsString());
          }
       }
public float overallFoamOpacity
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".overallFoamOpacity").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".overallFoamOpacity", value.AsString());
          }
       }
public float overallRippleMagnitude
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".overallRippleMagnitude").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".overallRippleMagnitude", value.AsString());
          }
       }
public float overallWaveMagnitude
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".overallWaveMagnitude").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".overallWaveMagnitude", value.AsString());
          }
       }
public float reflectDetailAdjust
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".reflectDetailAdjust").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".reflectDetailAdjust", value.AsString());
          }
       }
public float reflectivity
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".reflectivity").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".reflectivity", value.AsString());
          }
       }
public int reflectMaxRateMs
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".reflectMaxRateMs").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".reflectMaxRateMs", value.AsString());
          }
       }
public bool reflectNormalUp
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".reflectNormalUp").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".reflectNormalUp", value.AsString());
          }
       }
public float reflectPriority
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".reflectPriority").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".reflectPriority", value.AsString());
          }
       }
public int reflectTexSize
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".reflectTexSize").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".reflectTexSize", value.AsString());
          }
       }
public Point2F rippleDir
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".rippleDir").AsPoint2F();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".rippleDir", value.AsString());
          }
       }
public float rippleMagnitude
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".rippleMagnitude").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".rippleMagnitude", value.AsString());
          }
       }
public float rippleSpeed
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".rippleSpeed").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".rippleSpeed", value.AsString());
          }
       }
public String rippleTex
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".rippleTex").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".rippleTex", value.AsString());
          }
       }
public Point2F rippleTexScale
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".rippleTexScale").AsPoint2F();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".rippleTexScale", value.AsString());
          }
       }
public coSFXAmbience soundAmbience
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".soundAmbience");
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".soundAmbience", value.ToString());
          }
       }
public ColorF specularColor
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".specularColor").AsColorF();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".specularColor", value.AsString());
          }
       }
public float specularPower
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".specularPower").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".specularPower", value.AsString());
          }
       }
public ColorI underwaterColor
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".underwaterColor").AsColorI();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".underwaterColor", value.AsString());
          }
       }
public bool useOcclusionQuery
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".useOcclusionQuery").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".useOcclusionQuery", value.AsString());
          }
       }
public float viscosity
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".viscosity").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".viscosity", value.AsString());
          }
       }
public float waterFogDensity
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".waterFogDensity").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".waterFogDensity", value.AsString());
          }
       }
public float waterFogDensityOffset
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".waterFogDensityOffset").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".waterFogDensityOffset", value.AsString());
          }
       }
public Point2F waveDir
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".waveDir").AsPoint2F();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".waveDir", value.AsString());
          }
       }
public float waveMagnitude
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".waveMagnitude").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".waveMagnitude", value.AsString());
          }
       }
public float waveSpeed
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".waveSpeed").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".waveSpeed", value.AsString());
          }
       }
public float wetDarkening
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".wetDarkening").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".wetDarkening", value.AsString());
          }
       }
public float wetDepth
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".wetDepth").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".wetDepth", value.AsString());
          }
       }
}}
