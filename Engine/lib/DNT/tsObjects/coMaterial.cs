
// Copyright (C) 2012 Winterleaf Entertainment L,L,C.
// 
// THE SOFTW ARE IS PROVIDED ON AN “ AS IS” BASIS, WITHOUT W ARRANTY OF ANY KIND,
// INCLUDING WITHOUT LIMIT ATION THE W ARRANTIES OF MERCHANT ABILITY, FITNESS
// FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT . THE ENTIRE RISK AS TO THE
// QUALITY AND PERFORMANCE OF THE SOFTW ARE IS THE RESPONSIBILITY OF LICENSEE.
// SHOULD THE SOFTW ARE PROVE DEFECTIVE IN ANY RESPECT , LICENSEE AND NOT LICEN -
// SOR OR ITS SUPPLIERS OR RESELLERS ASSUMES THE ENTIRE COST OF AN Y SERVICE AND
// REPAIR. THIS DISCLAIMER OF W ARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS
// AGREEMENT. NO USE OF THE SOFTW ARE IS AUTHORIZED HEREUNDER EXCEPT UNDER
// THIS DISCLAIMER.
// 
// The use of the WinterLeaf Entertainment LLC DotNetT orque (“DNT ”) and DotNetT orque
// Customizer (“DNTC”)is governed by this license agreement (“ Agreement”).
// 
// R E S T R I C T I O N S
// 
// (a) Licensee may not: (i) create any derivative works of DNTC, including but not
// limited to translations, localizations, technology add-ons, or game making software
// other than Games; (ii) reverse engineer , or otherwise attempt to derive the algorithms
// for DNT or DNTC (iii) redistribute, encumber , sell, rent, lease, sublicense, or otherwise
// transfer rights to  DNTC; or (iv) remove or alter any tra demark, logo, copyright
// or other proprietary notices, legends, symbols or labels in DNT or DNTC; or (iiv) use
// the Software to develop or distribute any software that compete s with the Software
// without WinterLeaf Entertainment’s prior written consent; or (i iiv) use the Software for
// any illegal purpose.
// (b) Licensee may not distribute the DNTC in any manner.
// 
// LI C E N S E G R A N T .
// This license allows companies of any size, government entities or individuals to cre -
// ate, sell, rent, lease, or otherwise profit commercially from, games using executables
// created from the source code of DNT
// 
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// THE SOURCE CODE GENERATED BY DNTC CAN BE  DISTRIBUTED PUBLICLY PROVIDED THAT THE 
// DISTRIBUTOR PROVIDES  THE GENERATE SOURCE CODE FREE OF CHARGE.
// 
// THIS SOURCE CODE (DNT) CAN BE DISTRIBUTED PUBLICLY PROVIDED THAT THE DISTRIBUTOR 
// PROVIDES  THE SOURCE CODE (DNT) FREE OF CHARGE.
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// 
// Please visit http://www.winterleafentertainment.com for more information about the project and latest updates.

#region
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using WinterLeaf.Classes;
using WinterLeaf.Containers;
using WinterLeaf.Enums;
using System.ComponentModel;
#endregion

namespace WinterLeaf.tsObjects
    {
    /// <summary>
    /// 
    /// </summary>
    internal class tsObjectConvertercoMaterial : TypeConverter
        {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="sourceType"></param>
        /// <returns></returns>
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
            {
            return (typeof(string) == sourceType);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="culture"></param>
        /// <param name="value"></param>
        /// <returns></returns>
        public override object ConvertFrom(ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value)
            {
            if (value is string)
                {
                return new coMaterial(value as string);
                }

            return null;
            }
        }

      
    /// <summary>
    /// 
    /// </summary>
    [TypeConverter(typeof(tsObjectConvertercoMaterial))]
    public class coMaterial: coBaseMaterialDefinition
{
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
public coMaterial(string simobjectid) : base(simobjectid){ }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
public coMaterial(uint simobjectid): base(simobjectid){ }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
public coMaterial(int simobjectid): base(simobjectid){ }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator ==(coMaterial ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return object.ReferenceEquals(simobjectid, null);
            return ts.Equals(simobjectid);


            }
  /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public override int GetHashCode()
            {
            throw new NotImplementedException();
            }
  /// <summary>
        /// 
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        public override bool Equals(object obj)
            {
            
            return (this._mSimObjectId ==(string)myReflections.ChangeType( obj,typeof(string)));
            }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator !=(coMaterial ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return !object.ReferenceEquals(simobjectid, null);
            return !ts.Equals(simobjectid);

            }


            /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator string( coMaterial ts)
            {
            return ts._mSimObjectId;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coMaterial(string ts)
            {
            return new coMaterial(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator int( coMaterial ts)
            {
            int i;
            return int.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coMaterial(int ts)
            {
            return new coMaterial(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator uint( coMaterial ts)
            {
            uint i;
            return uint.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coMaterial(uint ts)
            {
            return new coMaterial(ts);
            }
public int alphaRef
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".alphaRef").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".alphaRef", value.AsString());
          }
       }
public bool alphaTest
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".alphaTest").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".alphaTest", value.AsString());
          }
       }
public Material__AnimType animFlags
       {
       get
          {          return (Material__AnimType)Enum.Parse(typeof(Material__AnimType), dnTorque.self.GetVar(_mSimObjectId + ".animFlags"));
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".animFlags", value.ToString());
          }
       }
public String baseTex
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".baseTex").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".baseTex", value.AsString());
          }
       }
public bool bumpAtlas
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".bumpAtlas").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".bumpAtlas", value.AsString());
          }
       }
public String bumpTex
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".bumpTex").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".bumpTex", value.AsString());
          }
       }
public bool castShadows
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".castShadows").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".castShadows", value.AsString());
          }
       }
public Point2I cellIndex
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".cellIndex").AsPoint2I();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".cellIndex", value.AsString());
          }
       }
public Point2I cellLayout
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".cellLayout").AsPoint2I();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".cellLayout", value.AsString());
          }
       }
public int cellSize
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".cellSize").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".cellSize", value.AsString());
          }
       }
public ColorF colorMultiply
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".colorMultiply").AsColorF();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".colorMultiply", value.AsString());
          }
       }
public String cubemap
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".cubemap").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".cubemap", value.AsString());
          }
       }
public coSFXTrack customFootstepSound
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".customFootstepSound");
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".customFootstepSound", value.ToString());
          }
       }
public coSFXTrack customImpactSound
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".customImpactSound");
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".customImpactSound", value.ToString());
          }
       }
public String detailMap
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".detailMap").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".detailMap", value.AsString());
          }
       }
public String detailNormalMap
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".detailNormalMap").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".detailNormalMap", value.AsString());
          }
       }
public float detailNormalMapStrength
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".detailNormalMapStrength").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".detailNormalMapStrength", value.AsString());
          }
       }
public Point2F detailScale
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".detailScale").AsPoint2F();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".detailScale", value.AsString());
          }
       }
public String detailTex
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".detailTex").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".detailTex", value.AsString());
          }
       }
public ColorF diffuseColor
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".diffuseColor").AsColorF();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".diffuseColor", value.AsString());
          }
       }
public String diffuseMap
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".diffuseMap").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".diffuseMap", value.AsString());
          }
       }
public float directSoundOcclusion
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".directSoundOcclusion").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".directSoundOcclusion", value.AsString());
          }
       }
public bool doubleSided
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".doubleSided").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".doubleSided", value.AsString());
          }
       }
public bool dynamicCubemap
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".dynamicCubemap").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".dynamicCubemap", value.AsString());
          }
       }
public ColorF effectColor
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".effectColor").AsColorF();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".effectColor", value.AsString());
          }
       }
public bool emissive
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".emissive").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".emissive", value.AsString());
          }
       }
public String envMap
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".envMap").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".envMap", value.AsString());
          }
       }
public String envTex
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".envTex").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".envTex", value.AsString());
          }
       }
public int footstepSoundId
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".footstepSoundId").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".footstepSoundId", value.AsString());
          }
       }
public float friction
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".friction").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".friction", value.AsString());
          }
       }
public bool glow
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".glow").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".glow", value.AsString());
          }
       }
public int impactSoundId
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".impactSoundId").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".impactSoundId", value.AsString());
          }
       }
public String lightMap
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".lightMap").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".lightMap", value.AsString());
          }
       }
public String mapTo
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".mapTo").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".mapTo", value.AsString());
          }
       }
public float minnaertConstant
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".minnaertConstant").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".minnaertConstant", value.AsString());
          }
       }
public String normalMap
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".normalMap").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".normalMap", value.AsString());
          }
       }
public String overlayMap
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".overlayMap").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".overlayMap", value.AsString());
          }
       }
public String overlayTex
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".overlayTex").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".overlayTex", value.AsString());
          }
       }
public float parallaxScale
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".parallaxScale").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".parallaxScale", value.AsString());
          }
       }
public bool pixelSpecular
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".pixelSpecular").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".pixelSpecular", value.AsString());
          }
       }
public bool planarReflection
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".planarReflection").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".planarReflection", value.AsString());
          }
       }
public float reverbSoundOcclusion
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".reverbSoundOcclusion").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".reverbSoundOcclusion", value.AsString());
          }
       }
public Point2F rotPivotOffset
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".rotPivotOffset").AsPoint2F();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".rotPivotOffset", value.AsString());
          }
       }
public float rotSpeed
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".rotSpeed").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".rotSpeed", value.AsString());
          }
       }
public Point2F scrollDir
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".scrollDir").AsPoint2F();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".scrollDir", value.AsString());
          }
       }
public float scrollSpeed
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".scrollSpeed").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".scrollSpeed", value.AsString());
          }
       }
public float sequenceFramePerSec
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".sequenceFramePerSec").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".sequenceFramePerSec", value.AsString());
          }
       }
public float sequenceSegmentSize
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".sequenceSegmentSize").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".sequenceSegmentSize", value.AsString());
          }
       }
public bool showDust
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".showDust").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".showDust", value.AsString());
          }
       }
public bool showFootprints
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".showFootprints").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".showFootprints", value.AsString());
          }
       }
public ColorF specular
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".specular").AsColorF();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".specular", value.AsString());
          }
       }
public String specularMap
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".specularMap").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".specularMap", value.AsString());
          }
       }
public float specularPower
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".specularPower").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".specularPower", value.AsString());
          }
       }
public bool subSurface
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".subSurface").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".subSurface", value.AsString());
          }
       }
public ColorF subSurfaceColor
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".subSurfaceColor").AsColorF();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".subSurfaceColor", value.AsString());
          }
       }
public float subSurfaceRolloff
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".subSurfaceRolloff").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".subSurfaceRolloff", value.AsString());
          }
       }
public String toneMap
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".toneMap").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".toneMap", value.AsString());
          }
       }
public bool translucent
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".translucent").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".translucent", value.AsString());
          }
       }
public Material__BlendOp translucentBlendOp
       {
       get
          {          return (Material__BlendOp)Enum.Parse(typeof(Material__BlendOp), dnTorque.self.GetVar(_mSimObjectId + ".translucentBlendOp"));
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".translucentBlendOp", value.ToString());
          }
       }
public bool translucentZWrite
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".translucentZWrite").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".translucentZWrite", value.AsString());
          }
       }
public bool useAnisotropic
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".useAnisotropic").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".useAnisotropic", value.AsString());
          }
       }
public bool vertColor
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".vertColor").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".vertColor", value.AsString());
          }
       }
public bool vertLit
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".vertLit").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".vertLit", value.AsString());
          }
       }
public float waveAmp
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".waveAmp").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".waveAmp", value.AsString());
          }
       }
public float waveFreq
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".waveFreq").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".waveFreq", value.AsString());
          }
       }
public Material__WaveType waveType
       {
       get
          {          return (Material__WaveType)Enum.Parse(typeof(Material__WaveType), dnTorque.self.GetVar(_mSimObjectId + ".waveType"));
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".waveType", value.ToString());
          }
       }
/// <summary>
/// ( Material, dumpInstances, void, 2, 2, 
///    Dumps a formatted list of the currently allocated material instances for this material to the console. )
/// 
/// </summary>
public  void dumpInstances(){
TorqueScriptTemplate.m_ts.fnMaterial_dumpInstances(_mSimObjectId);
}
/// <summary>
/// ( Material, flush, void, 2, 2, 
///    Flushes all material instances that use this material. )
/// 
/// </summary>
public  void flush(){
TorqueScriptTemplate.m_ts.fnMaterial_flush(_mSimObjectId);
}
/// <summary>
/// ( Material, getAnimFlags, const char*, 3, 3,  )
/// 
/// </summary>
public  string getAnimFlags(string a2){
return TorqueScriptTemplate.m_ts.fnMaterial_getAnimFlags(_mSimObjectId, a2);
}
/// <summary>
/// (Material, getFilename, const char*, 2, 2, Get filename of material)
/// 
/// </summary>
public  new  string getFilename(){
return TorqueScriptTemplate.m_ts.fnMaterial_getFilename(_mSimObjectId);
}
/// <summary>
/// ( Material, isAutoGenerated, bool, 2, 2, 
///               Returns true if this Material was automatically generated by MaterialList::mapMaterials() )
/// 
/// </summary>
public  bool isAutoGenerated(){
return TorqueScriptTemplate.m_ts.fnMaterial_isAutoGenerated(_mSimObjectId);
}
/// <summary>
/// ( Material, reload, void, 2, 2, 
///    Reloads all material instances that use this material. )
/// 
/// </summary>
public  void reload(){
TorqueScriptTemplate.m_ts.fnMaterial_reload(_mSimObjectId);
}
/// <summary>
/// ( Material, setAutoGenerated, void, 3, 3, 
///               setAutoGenerated(bool isAutoGenerated): Set whether or not the Material is autogenerated. )
/// 
/// </summary>
public  void setAutoGenerated(string a2){
TorqueScriptTemplate.m_ts.fnMaterial_setAutoGenerated(_mSimObjectId, a2);
}
}}
