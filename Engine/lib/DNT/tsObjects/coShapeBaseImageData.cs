
// Copyright (C) 2012 Winterleaf Entertainment L,L,C.
// 
// THE SOFTW ARE IS PROVIDED ON AN “ AS IS” BASIS, WITHOUT W ARRANTY OF ANY KIND,
// INCLUDING WITHOUT LIMIT ATION THE W ARRANTIES OF MERCHANT ABILITY, FITNESS
// FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT . THE ENTIRE RISK AS TO THE
// QUALITY AND PERFORMANCE OF THE SOFTW ARE IS THE RESPONSIBILITY OF LICENSEE.
// SHOULD THE SOFTW ARE PROVE DEFECTIVE IN ANY RESPECT , LICENSEE AND NOT LICEN -
// SOR OR ITS SUPPLIERS OR RESELLERS ASSUMES THE ENTIRE COST OF AN Y SERVICE AND
// REPAIR. THIS DISCLAIMER OF W ARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS
// AGREEMENT. NO USE OF THE SOFTW ARE IS AUTHORIZED HEREUNDER EXCEPT UNDER
// THIS DISCLAIMER.
// 
// The use of the WinterLeaf Entertainment LLC DotNetT orque (“DNT ”) and DotNetT orque
// Customizer (“DNTC”)is governed by this license agreement (“ Agreement”).
// 
// R E S T R I C T I O N S
// 
// (a) Licensee may not: (i) create any derivative works of DNTC, including but not
// limited to translations, localizations, technology add-ons, or game making software
// other than Games; (ii) reverse engineer , or otherwise attempt to derive the algorithms
// for DNT or DNTC (iii) redistribute, encumber , sell, rent, lease, sublicense, or otherwise
// transfer rights to  DNTC; or (iv) remove or alter any tra demark, logo, copyright
// or other proprietary notices, legends, symbols or labels in DNT or DNTC; or (iiv) use
// the Software to develop or distribute any software that compete s with the Software
// without WinterLeaf Entertainment’s prior written consent; or (i iiv) use the Software for
// any illegal purpose.
// (b) Licensee may not distribute the DNTC in any manner.
// 
// LI C E N S E G R A N T .
// This license allows companies of any size, government entities or individuals to cre -
// ate, sell, rent, lease, or otherwise profit commercially from, games using executables
// created from the source code of DNT
// 
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// THE SOURCE CODE GENERATED BY DNTC CAN BE  DISTRIBUTED PUBLICLY PROVIDED THAT THE 
// DISTRIBUTOR PROVIDES  THE GENERATE SOURCE CODE FREE OF CHARGE.
// 
// THIS SOURCE CODE (DNT) CAN BE DISTRIBUTED PUBLICLY PROVIDED THAT THE DISTRIBUTOR 
// PROVIDES  THE SOURCE CODE (DNT) FREE OF CHARGE.
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// 
// Please visit http://www.winterleafentertainment.com for more information about the project and latest updates.

#region
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using WinterLeaf.Classes;
using WinterLeaf.Containers;
using WinterLeaf.Enums;
using System.ComponentModel;
#endregion

namespace WinterLeaf.tsObjects
    {
    /// <summary>
    /// 
    /// </summary>
    internal class tsObjectConvertercoShapeBaseImageData : TypeConverter
        {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="sourceType"></param>
        /// <returns></returns>
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
            {
            return (typeof(string) == sourceType);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="culture"></param>
        /// <param name="value"></param>
        /// <returns></returns>
        public override object ConvertFrom(ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value)
            {
            if (value is string)
                {
                return new coShapeBaseImageData(value as string);
                }

            return null;
            }
        }

      
    /// <summary>
    /// 
    /// </summary>
    [TypeConverter(typeof(tsObjectConvertercoShapeBaseImageData))]
    public class coShapeBaseImageData: coGameBaseData
{
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
public coShapeBaseImageData(string simobjectid) : base(simobjectid){ }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
public coShapeBaseImageData(uint simobjectid): base(simobjectid){ }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
public coShapeBaseImageData(int simobjectid): base(simobjectid){ }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator ==(coShapeBaseImageData ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return object.ReferenceEquals(simobjectid, null);
            return ts.Equals(simobjectid);


            }
  /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public override int GetHashCode()
            {
            throw new NotImplementedException();
            }
  /// <summary>
        /// 
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        public override bool Equals(object obj)
            {
            
            return (this._mSimObjectId ==(string)myReflections.ChangeType( obj,typeof(string)));
            }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator !=(coShapeBaseImageData ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return !object.ReferenceEquals(simobjectid, null);
            return !ts.Equals(simobjectid);

            }


            /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator string( coShapeBaseImageData ts)
            {
            return ts._mSimObjectId;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coShapeBaseImageData(string ts)
            {
            return new coShapeBaseImageData(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator int( coShapeBaseImageData ts)
            {
            int i;
            return int.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coShapeBaseImageData(int ts)
            {
            return new coShapeBaseImageData(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator uint( coShapeBaseImageData ts)
            {
            uint i;
            return uint.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coShapeBaseImageData(uint ts)
            {
            return new coShapeBaseImageData(ts);
            }
public bool accuFire
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".accuFire").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".accuFire", value.AsString());
          }
       }
public bool animateAllShapes
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".animateAllShapes").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".animateAllShapes", value.AsString());
          }
       }
public bool animateOnServer
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".animateOnServer").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".animateOnServer", value.AsString());
          }
       }
public Point3F camShakeAmp
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".camShakeAmp").AsPoint3F();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".camShakeAmp", value.AsString());
          }
       }
public Point3F camShakeFreq
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".camShakeFreq").AsPoint3F();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".camShakeFreq", value.AsString());
          }
       }
public coDebrisData casing
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".casing");
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".casing", value.ToString());
          }
       }
public bool cloakable
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".cloakable").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".cloakable", value.AsString());
          }
       }
public bool computeCRC
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".computeCRC").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".computeCRC", value.AsString());
          }
       }
public bool correctMuzzleVector
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".correctMuzzleVector").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".correctMuzzleVector", value.AsString());
          }
       }
public bool correctMuzzleVectorTP
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".correctMuzzleVectorTP").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".correctMuzzleVectorTP", value.AsString());
          }
       }
public bool emap
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".emap").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".emap", value.AsString());
          }
       }
public TransformF eyeOffset
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".eyeOffset").AsTransformF();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".eyeOffset", value.AsString());
          }
       }
public TransformF eyeRotation
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".eyeRotation").AsTransformF();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".eyeRotation", value.AsString());
          }
       }
public bool firstPerson
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".firstPerson").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".firstPerson", value.AsString());
          }
       }
public String imageAnimPrefix
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".imageAnimPrefix").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".imageAnimPrefix", value.AsString());
          }
       }
public String imageAnimPrefixFP
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".imageAnimPrefixFP").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".imageAnimPrefixFP", value.AsString());
          }
       }
public float lightBrightness
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".lightBrightness").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".lightBrightness", value.AsString());
          }
       }
public ColorF lightColor
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".lightColor").AsColorF();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".lightColor", value.AsString());
          }
       }
public int lightDuration
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".lightDuration").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".lightDuration", value.AsString());
          }
       }
public float lightRadius
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".lightRadius").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".lightRadius", value.AsString());
          }
       }
public ShapeBaseImageData__LightType lightType
       {
       get
          {          return (ShapeBaseImageData__LightType)Enum.Parse(typeof(ShapeBaseImageData__LightType), dnTorque.self.GetVar(_mSimObjectId + ".lightType"));
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".lightType", value.ToString());
          }
       }
public float mass
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".mass").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".mass", value.AsString());
          }
       }
public int maxConcurrentSounds
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".maxConcurrentSounds").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".maxConcurrentSounds", value.AsString());
          }
       }
public float minEnergy
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".minEnergy").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".minEnergy", value.AsString());
          }
       }
public int mountPoint
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".mountPoint").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".mountPoint", value.AsString());
          }
       }
public TransformF offset
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".offset").AsTransformF();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".offset", value.AsString());
          }
       }
public coProjectileData projectile
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".projectile");
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".projectile", value.ToString());
          }
       }
public TransformF rotation
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".rotation").AsTransformF();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".rotation", value.AsString());
          }
       }
public float scriptAnimTransitionTime
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".scriptAnimTransitionTime").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".scriptAnimTransitionTime", value.AsString());
          }
       }
public bool shakeCamera
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".shakeCamera").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".shakeCamera", value.AsString());
          }
       }
public String shapeFile
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".shapeFile").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".shapeFile", value.AsString());
          }
       }
public String shapeFileFP
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".shapeFileFP").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".shapeFileFP", value.AsString());
          }
       }
public Point3F shellExitDir
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".shellExitDir").AsPoint3F();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".shellExitDir", value.AsString());
          }
       }
public float shellExitVariance
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".shellExitVariance").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".shellExitVariance", value.AsString());
          }
       }
public float shellVelocity
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".shellVelocity").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".shellVelocity", value.AsString());
          }
       }
public bool stateAllowImageChange
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".stateAllowImageChange").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stateAllowImageChange", value.AsString());
          }
       }
public bool stateAlternateFire
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".stateAlternateFire").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stateAlternateFire", value.AsString());
          }
       }
public bool stateDirection
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".stateDirection").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stateDirection", value.AsString());
          }
       }
public bool stateEjectShell
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".stateEjectShell").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stateEjectShell", value.AsString());
          }
       }
public coParticleEmitterData stateEmitter
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".stateEmitter");
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stateEmitter", value.ToString());
          }
       }
public String stateEmitterNode
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".stateEmitterNode").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stateEmitterNode", value.AsString());
          }
       }
public float stateEmitterTime
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".stateEmitterTime").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stateEmitterTime", value.AsString());
          }
       }
public float stateEnergyDrain
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".stateEnergyDrain").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stateEnergyDrain", value.AsString());
          }
       }
public bool stateFire
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".stateFire").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stateFire", value.AsString());
          }
       }
public bool stateIgnoreLoadedForReady
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".stateIgnoreLoadedForReady").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stateIgnoreLoadedForReady", value.AsString());
          }
       }
public ShapeBaseImageData__StateData__LoadedState stateLoadedFlag
       {
       get
          {          return (ShapeBaseImageData__StateData__LoadedState)Enum.Parse(typeof(ShapeBaseImageData__StateData__LoadedState), dnTorque.self.GetVar(_mSimObjectId + ".stateLoadedFlag"));
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stateLoadedFlag", value.ToString());
          }
       }
public String stateName
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".stateName").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stateName", value.AsString());
          }
       }
public ShapeBaseImageData__StateData__RecoilState stateRecoil
       {
       get
          {          return (ShapeBaseImageData__StateData__RecoilState)Enum.Parse(typeof(ShapeBaseImageData__StateData__RecoilState), dnTorque.self.GetVar(_mSimObjectId + ".stateRecoil"));
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stateRecoil", value.ToString());
          }
       }
public bool stateReload
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".stateReload").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stateReload", value.AsString());
          }
       }
public bool stateScaleAnimation
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".stateScaleAnimation").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stateScaleAnimation", value.AsString());
          }
       }
public bool stateScaleAnimationFP
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".stateScaleAnimationFP").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stateScaleAnimationFP", value.AsString());
          }
       }
public bool stateScaleShapeSequence
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".stateScaleShapeSequence").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stateScaleShapeSequence", value.AsString());
          }
       }
public String stateScript
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".stateScript").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stateScript", value.AsString());
          }
       }
public String stateSequence
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".stateSequence").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stateSequence", value.AsString());
          }
       }
public bool stateSequenceNeverTransition
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".stateSequenceNeverTransition").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stateSequenceNeverTransition", value.AsString());
          }
       }
public bool stateSequenceRandomFlash
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".stateSequenceRandomFlash").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stateSequenceRandomFlash", value.AsString());
          }
       }
public bool stateSequenceTransitionIn
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".stateSequenceTransitionIn").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stateSequenceTransitionIn", value.AsString());
          }
       }
public bool stateSequenceTransitionOut
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".stateSequenceTransitionOut").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stateSequenceTransitionOut", value.AsString());
          }
       }
public float stateSequenceTransitionTime
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".stateSequenceTransitionTime").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stateSequenceTransitionTime", value.AsString());
          }
       }
public String stateShapeSequence
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".stateShapeSequence").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stateShapeSequence", value.AsString());
          }
       }
public coSFXTrack stateSound
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".stateSound");
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stateSound", value.ToString());
          }
       }
public ShapeBaseImageData__StateData__SpinState stateSpinThread
       {
       get
          {          return (ShapeBaseImageData__StateData__SpinState)Enum.Parse(typeof(ShapeBaseImageData__StateData__SpinState), dnTorque.self.GetVar(_mSimObjectId + ".stateSpinThread"));
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stateSpinThread", value.ToString());
          }
       }
public float stateTimeoutValue
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".stateTimeoutValue").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stateTimeoutValue", value.AsString());
          }
       }
public String stateTransitionGeneric0In
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".stateTransitionGeneric0In").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stateTransitionGeneric0In", value.AsString());
          }
       }
public String stateTransitionGeneric0Out
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".stateTransitionGeneric0Out").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stateTransitionGeneric0Out", value.AsString());
          }
       }
public String stateTransitionGeneric1In
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".stateTransitionGeneric1In").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stateTransitionGeneric1In", value.AsString());
          }
       }
public String stateTransitionGeneric1Out
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".stateTransitionGeneric1Out").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stateTransitionGeneric1Out", value.AsString());
          }
       }
public String stateTransitionGeneric2In
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".stateTransitionGeneric2In").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stateTransitionGeneric2In", value.AsString());
          }
       }
public String stateTransitionGeneric2Out
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".stateTransitionGeneric2Out").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stateTransitionGeneric2Out", value.AsString());
          }
       }
public String stateTransitionGeneric3In
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".stateTransitionGeneric3In").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stateTransitionGeneric3In", value.AsString());
          }
       }
public String stateTransitionGeneric3Out
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".stateTransitionGeneric3Out").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stateTransitionGeneric3Out", value.AsString());
          }
       }
public String stateTransitionOnAltTriggerDown
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".stateTransitionOnAltTriggerDown").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stateTransitionOnAltTriggerDown", value.AsString());
          }
       }
public String stateTransitionOnAltTriggerUp
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".stateTransitionOnAltTriggerUp").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stateTransitionOnAltTriggerUp", value.AsString());
          }
       }
public String stateTransitionOnAmmo
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".stateTransitionOnAmmo").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stateTransitionOnAmmo", value.AsString());
          }
       }
public String stateTransitionOnLoaded
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".stateTransitionOnLoaded").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stateTransitionOnLoaded", value.AsString());
          }
       }
public String stateTransitionOnMotion
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".stateTransitionOnMotion").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stateTransitionOnMotion", value.AsString());
          }
       }
public String stateTransitionOnNoAmmo
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".stateTransitionOnNoAmmo").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stateTransitionOnNoAmmo", value.AsString());
          }
       }
public String stateTransitionOnNoMotion
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".stateTransitionOnNoMotion").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stateTransitionOnNoMotion", value.AsString());
          }
       }
public String stateTransitionOnNoTarget
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".stateTransitionOnNoTarget").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stateTransitionOnNoTarget", value.AsString());
          }
       }
public String stateTransitionOnNotLoaded
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".stateTransitionOnNotLoaded").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stateTransitionOnNotLoaded", value.AsString());
          }
       }
public String stateTransitionOnNotWet
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".stateTransitionOnNotWet").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stateTransitionOnNotWet", value.AsString());
          }
       }
public String stateTransitionOnTarget
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".stateTransitionOnTarget").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stateTransitionOnTarget", value.AsString());
          }
       }
public String stateTransitionOnTimeout
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".stateTransitionOnTimeout").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stateTransitionOnTimeout", value.AsString());
          }
       }
public String stateTransitionOnTriggerDown
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".stateTransitionOnTriggerDown").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stateTransitionOnTriggerDown", value.AsString());
          }
       }
public String stateTransitionOnTriggerUp
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".stateTransitionOnTriggerUp").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stateTransitionOnTriggerUp", value.AsString());
          }
       }
public String stateTransitionOnWet
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".stateTransitionOnWet").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stateTransitionOnWet", value.AsString());
          }
       }
public bool stateWaitForTimeout
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".stateWaitForTimeout").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stateWaitForTimeout", value.AsString());
          }
       }
public bool useEyeNode
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".useEyeNode").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".useEyeNode", value.AsString());
          }
       }
public bool useRemainderDT
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".useRemainderDT").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".useRemainderDT", value.AsString());
          }
       }
public bool usesEnergy
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".usesEnergy").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".usesEnergy", value.AsString());
          }
       }
}}
