// Copyright (C) 2012 Winterleaf Entertainment L,L,C.
// 
// THE SOFTW ARE IS PROVIDED ON AN “ AS IS” BASIS, WITHOUT W ARRANTY OF ANY KIND,
// INCLUDING WITHOUT LIMIT ATION THE W ARRANTIES OF MERCHANT ABILITY, FITNESS
// FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT . THE ENTIRE RISK AS TO THE
// QUALITY AND PERFORMANCE OF THE SOFTW ARE IS THE RESPONSIBILITY OF LICENSEE.
// SHOULD THE SOFTW ARE PROVE DEFECTIVE IN ANY RESPECT , LICENSEE AND NOT LICEN -
// SOR OR ITS SUPPLIERS OR RESELLERS ASSUMES THE ENTIRE COST OF AN Y SERVICE AND
// REPAIR. THIS DISCLAIMER OF W ARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS
// AGREEMENT. NO USE OF THE SOFTW ARE IS AUTHORIZED HEREUNDER EXCEPT UNDER
// THIS DISCLAIMER.
// 
// The use of the WinterLeaf Entertainment LLC DotNetT orque (“DNT ”) and DotNetT orque
// Customizer (“DNTC”)is governed by this license agreement (“ Agreement”).
// 
// R E S T R I C T I O N S
// 
// (a) Licensee may not: (i) create any derivative works of DNTC, including but not
// limited to translations, localizations, technology add-ons, or game making software
// other than Games; (ii) reverse engineer , or otherwise attempt to derive the algorithms
// for DNT or DNTC (iii) redistribute, encumber , sell, rent, lease, sublicense, or otherwise
// transfer rights to  DNTC; or (iv) remove or alter any tra demark, logo, copyright
// or other proprietary notices, legends, symbols or labels in DNT or DNTC; or (iiv) use
// the Software to develop or distribute any software that compete s with the Software
// without WinterLeaf Entertainment’s prior written consent; or (i iiv) use the Software for
// any illegal purpose.
// (b) Licensee may not distribute the DNTC in any manner.
// 
// LI C E N S E G R A N T .
// This license allows companies of any size, government entities or individuals to cre -
// ate, sell, rent, lease, or otherwise profit commercially from, games using executables
// created from the source code of DNT
// 
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// THE SOURCE CODE GENERATED BY DNTC CAN BE  DISTRIBUTED PUBLICLY PROVIDED THAT THE 
// DISTRIBUTOR PROVIDES  THE GENERATE SOURCE CODE FREE OF CHARGE.
// 
// THIS SOURCE CODE (DNT) CAN BE DISTRIBUTED PUBLICLY PROVIDED THAT THE DISTRIBUTOR 
// PROVIDES  THE SOURCE CODE (DNT) FREE OF CHARGE.
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// 
// Please visit http://www.winterleafentertainment.com for more information about the project and latest updates.
// 
// 
// 

#region

using System;
using System.ComponentModel;
using WinterLeaf.Classes;

#endregion

namespace WinterLeaf.tsObjects
    {
    /// <summary>
    /// 
    /// </summary>
    internal class tsObjectConvertercoInteriorInstance : TypeConverter
        {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="sourceType"></param>
        /// <returns></returns>
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
            {
            return (typeof (string) == sourceType);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="culture"></param>
        /// <param name="value"></param>
        /// <returns></returns>
        public override object ConvertFrom(ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value)
            {
            if (value is string)
                {
                return new coInteriorInstance(value as string);
                }

            return null;
            }
        }


    /// <summary>
    /// 
    /// </summary>
    [TypeConverter(typeof (tsObjectConvertercoInteriorInstance))]
    public class coInteriorInstance : coSceneZoneSpace
        {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
        internal coInteriorInstance(string simobjectid) : base(simobjectid)
            {
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
        internal coInteriorInstance(uint simobjectid) : base(simobjectid)
            {
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
        internal coInteriorInstance(int simobjectid) : base(simobjectid)
            {
            }

        /// <summary>
        /// Path and filename of the Interior file (.DIF) to load for this InteriorInstance.
        /// </summary>
        public String interiorFile
            {
            get { return dnTorque.self.GetVar(_mSimObjectId + ".interiorFile").AsString(); }
            set { dnTorque.self.SetVar(_mSimObjectId + ".interiorFile", value.AsString()); }
            }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator ==(coInteriorInstance ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return object.ReferenceEquals(simobjectid, null);
            return ts.Equals(simobjectid);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public override int GetHashCode()
            {
            throw new NotImplementedException();
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        public override bool Equals(object obj)
            {
            return (this._mSimObjectId == (string) myReflections.ChangeType(obj, typeof (string)));
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator !=(coInteriorInstance ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return !object.ReferenceEquals(simobjectid, null);
            return !ts.Equals(simobjectid);
            }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator string(coInteriorInstance ts)
            {
            if (object.ReferenceEquals(ts, null))
                return "0";
            return ts._mSimObjectId;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coInteriorInstance(string ts)
            {
            return new coInteriorInstance(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator int(coInteriorInstance ts)
            {
            if (object.ReferenceEquals(ts, null))
                return 0;
            int i;
            return int.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coInteriorInstance(int ts)
            {
            return new coInteriorInstance(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator uint(coInteriorInstance ts)
            {
            if (object.ReferenceEquals(ts, null))
                return 0;
            uint i;
            return uint.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coInteriorInstance(uint ts)
            {
            return new coInteriorInstance(ts);
            }

        /// <summary>
        /// @brief Change one of the materials on the shape.
        /// 
        ///    This method changes materials per mapTo with others. The material that 
        ///    is being replaced is mapped to unmapped_mat as a part of this transition.
        /// 
        ///    @note Warning, right now this only sort of works. It doesn't do a live 
        ///    update like it should.\b
        /// 
        ///    @param mapTo The name of the material target to remap (from getTargetName)
        ///    @param oldMat The old Material that was mapped 
        ///    @param newMat The new Material to map
        /// 
        ///    @tsexample
        ///    // remap the first material in the shape
        ///    %mapTo = %interiorObject.getTargetName( 0 );
        ///    %interiorObject.changeMaterial( %mapTo, 0, MyMaterial );
        ///    @endtsexample )
        /// 
        /// </summary>
        public void changeMaterial(string mapTo, string oldMat, string newMat)
            {
            TorqueScriptTemplate.m_ts.fnInteriorInstance_changeMaterial(_mSimObjectId, mapTo, oldMat, newMat);
            }

        /// <summary>
        /// @brief Exports the Interior to a Collada file
        /// 
        ///    @param bakeTransform Bakes the InteriorInstance's transform into the vertex positions
        ///    
        ///    @tsexample
        ///    // Export to COLLADA, do not bakeTransform
        ///    %interiorObject.exportToCollada(0);
        ///    @endtsexample)
        /// 
        /// </summary>
        public void exportToCollada(bool bakeTransform)
            {
            TorqueScriptTemplate.m_ts.fnInteriorInstance_exportToCollada(_mSimObjectId, bakeTransform);
            }

        /// <summary>
        /// @brief Get the interior file name
        ///    
        /// 
        ///    @return The name of the interior's model file in .DIF.
        /// 
        ///    @tsexample
        ///    %interiorObject.getModelFile();
        ///    @endtsexample)
        /// 
        /// </summary>
        public string getModelFile()
            {
            return TorqueScriptTemplate.m_ts.fnInteriorInstance_getModelFile(_mSimObjectId);
            }

        /// <summary>
        /// @brief Get the number of detail levels interior was created with
        ///    
        ///    @tsexample
        ///    %numLODs = %interiorObject.getNumDetailLevels();
        ///    echo(%numLODs);
        ///    @endtsexample)
        /// 
        /// </summary>
        public int getNumDetailLevels()
            {
            return TorqueScriptTemplate.m_ts.fnInteriorInstance_getNumDetailLevels(_mSimObjectId);
            }

        /// <summary>
        /// @brief Get the number of materials used by interior
        ///    
        ///    @param	detailLevel Interior level of detail to scan
        /// 
        ///    @return The number of materials used by the interior at a specified detail level
        /// 
        ///    @tsexample
        ///    // Find materials used at first level of detail
        ///    %targetCount = %interiorObject.getTargetCount(1);
        ///    echo(%targetCount);
        ///    @endtsexample)
        /// 
        /// </summary>
        public int getTargetCount(uint detailLevel)
            {
            return TorqueScriptTemplate.m_ts.fnInteriorInstance_getTargetCount(_mSimObjectId, detailLevel);
            }

        /// <summary>
        /// @brief Get the name of the indexed shape material
        ///    
        ///    @param	detailLevel Target LOD
        ///    @param	targetNum Index mapped to the target
        /// 
        ///    @return The name of the target (material) at the specified detail level and index
        /// 
        ///    @tsexample
        ///    // First level of detail, top of the index map
        ///    %targetName = %interiorObject.getTargetName(1, 0);
        ///    echo(%targetName);
        ///    @endtsexample)
        /// 
        /// </summary>
        public string getTargetName(int detailLevel, int targetNum)
            {
            return TorqueScriptTemplate.m_ts.fnInteriorInstance_getTargetName(_mSimObjectId, detailLevel, targetNum);
            }

        /// <summary>
        /// @brief This sets the alarm mode of the interior
        /// 
        ///    The alarm mode is used when debugging bad geometry for an interior. When on, the the bad verties 
        ///    will be rendered a different color.
        /// 
        ///    @param alarmMode If true the interior will be in an alarm state next frame. Options are \'On\' or \'Off\'.
        ///    
        ///    @tsexample
        ///    // Turn on alarm mode debugging for interior
        ///    %interiorObject.setAlarmMode(\"On\");
        ///    @endtsexample)
        /// 
        /// </summary>
        public void setAlarmMode(string alarmMode)
            {
            TorqueScriptTemplate.m_ts.fnInteriorInstance_setAlarmMode(_mSimObjectId, alarmMode);
            }

        /// <summary>
        /// @brief Manually changes the current detail level, rather than automatically via view distance
        ///    
        ///    @param level Detail level to force.
        /// 
        ///    @tsexample
        ///    %interiorObject.setDetailLevel(2);
        ///    @endtsexample)
        /// 
        /// </summary>
        public void setDetailLevel(int level)
            {
            TorqueScriptTemplate.m_ts.fnInteriorInstance_setDetailLevel(_mSimObjectId, level);
            }
        }
    }