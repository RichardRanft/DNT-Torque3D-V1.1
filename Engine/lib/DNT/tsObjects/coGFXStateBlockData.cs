
// Copyright (C) 2012 Winterleaf Entertainment L,L,C.
// 
// THE SOFTW ARE IS PROVIDED ON AN “ AS IS” BASIS, WITHOUT W ARRANTY OF ANY KIND,
// INCLUDING WITHOUT LIMIT ATION THE W ARRANTIES OF MERCHANT ABILITY, FITNESS
// FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT . THE ENTIRE RISK AS TO THE
// QUALITY AND PERFORMANCE OF THE SOFTW ARE IS THE RESPONSIBILITY OF LICENSEE.
// SHOULD THE SOFTW ARE PROVE DEFECTIVE IN ANY RESPECT , LICENSEE AND NOT LICEN -
// SOR OR ITS SUPPLIERS OR RESELLERS ASSUMES THE ENTIRE COST OF AN Y SERVICE AND
// REPAIR. THIS DISCLAIMER OF W ARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS
// AGREEMENT. NO USE OF THE SOFTW ARE IS AUTHORIZED HEREUNDER EXCEPT UNDER
// THIS DISCLAIMER.
// 
// The use of the WinterLeaf Entertainment LLC DotNetT orque (“DNT ”) and DotNetT orque
// Customizer (“DNTC”)is governed by this license agreement (“ Agreement”).
// 
// R E S T R I C T I O N S
// 
// (a) Licensee may not: (i) create any derivative works of DNTC, including but not
// limited to translations, localizations, technology add-ons, or game making software
// other than Games; (ii) reverse engineer , or otherwise attempt to derive the algorithms
// for DNT or DNTC (iii) redistribute, encumber , sell, rent, lease, sublicense, or otherwise
// transfer rights to  DNTC; or (iv) remove or alter any tra demark, logo, copyright
// or other proprietary notices, legends, symbols or labels in DNT or DNTC; or (iiv) use
// the Software to develop or distribute any software that compete s with the Software
// without WinterLeaf Entertainment’s prior written consent; or (i iiv) use the Software for
// any illegal purpose.
// (b) Licensee may not distribute the DNTC in any manner.
// 
// LI C E N S E G R A N T .
// This license allows companies of any size, government entities or individuals to cre -
// ate, sell, rent, lease, or otherwise profit commercially from, games using executables
// created from the source code of DNT
// 
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// THE SOURCE CODE GENERATED BY DNTC CAN BE  DISTRIBUTED PUBLICLY PROVIDED THAT THE 
// DISTRIBUTOR PROVIDES  THE GENERATE SOURCE CODE FREE OF CHARGE.
// 
// THIS SOURCE CODE (DNT) CAN BE DISTRIBUTED PUBLICLY PROVIDED THAT THE DISTRIBUTOR 
// PROVIDES  THE SOURCE CODE (DNT) FREE OF CHARGE.
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// 
// Please visit http://www.winterleafentertainment.com for more information about the project and latest updates.

#region
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using WinterLeaf.Classes;
using WinterLeaf.Containers;
using WinterLeaf.Enums;
using System.ComponentModel;
#endregion

namespace WinterLeaf.tsObjects
    {
    /// <summary>
    /// 
    /// </summary>
    internal class tsObjectConvertercoGFXStateBlockData : TypeConverter
        {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="sourceType"></param>
        /// <returns></returns>
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
            {
            return (typeof(string) == sourceType);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="culture"></param>
        /// <param name="value"></param>
        /// <returns></returns>
        public override object ConvertFrom(ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value)
            {
            if (value is string)
                {
                return new coGFXStateBlockData(value as string);
                }

            return null;
            }
        }

      
    /// <summary>
    /// 
    /// </summary>
    [TypeConverter(typeof(tsObjectConvertercoGFXStateBlockData))]
    public class coGFXStateBlockData: coSimObject
{
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
public coGFXStateBlockData(string simobjectid) : base(simobjectid){ }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
public coGFXStateBlockData(uint simobjectid): base(simobjectid){ }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
public coGFXStateBlockData(int simobjectid): base(simobjectid){ }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator ==(coGFXStateBlockData ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return object.ReferenceEquals(simobjectid, null);
            return ts.Equals(simobjectid);


            }
  /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public override int GetHashCode()
            {
            throw new NotImplementedException();
            }
  /// <summary>
        /// 
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        public override bool Equals(object obj)
            {
            
            return (this._mSimObjectId ==(string)myReflections.ChangeType( obj,typeof(string)));
            }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator !=(coGFXStateBlockData ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return !object.ReferenceEquals(simobjectid, null);
            return !ts.Equals(simobjectid);

            }


            /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator string( coGFXStateBlockData ts)
            {
            return ts._mSimObjectId;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coGFXStateBlockData(string ts)
            {
            return new coGFXStateBlockData(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator int( coGFXStateBlockData ts)
            {
            int i;
            return int.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coGFXStateBlockData(int ts)
            {
            return new coGFXStateBlockData(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator uint( coGFXStateBlockData ts)
            {
            uint i;
            return uint.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coGFXStateBlockData(uint ts)
            {
            return new coGFXStateBlockData(ts);
            }
public bool alphaDefined
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".alphaDefined").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".alphaDefined", value.AsString());
          }
       }
public bool alphaTestEnable
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".alphaTestEnable").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".alphaTestEnable", value.AsString());
          }
       }
public TypeGFXCmpFunc alphaTestFunc
       {
       get
          {          return (TypeGFXCmpFunc)Enum.Parse(typeof(TypeGFXCmpFunc), dnTorque.self.GetVar(_mSimObjectId + ".alphaTestFunc"));
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".alphaTestFunc", value.ToString());
          }
       }
public int alphaTestRef
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".alphaTestRef").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".alphaTestRef", value.AsString());
          }
       }
public bool blendDefined
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".blendDefined").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".blendDefined", value.AsString());
          }
       }
public TypeGFXBlend blendDest
       {
       get
          {          return (TypeGFXBlend)Enum.Parse(typeof(TypeGFXBlend), dnTorque.self.GetVar(_mSimObjectId + ".blendDest"));
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".blendDest", value.ToString());
          }
       }
public bool blendEnable
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".blendEnable").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".blendEnable", value.AsString());
          }
       }
public TypeGFXBlendOp blendOp
       {
       get
          {          return (TypeGFXBlendOp)Enum.Parse(typeof(TypeGFXBlendOp), dnTorque.self.GetVar(_mSimObjectId + ".blendOp"));
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".blendOp", value.ToString());
          }
       }
public TypeGFXBlend blendSrc
       {
       get
          {          return (TypeGFXBlend)Enum.Parse(typeof(TypeGFXBlend), dnTorque.self.GetVar(_mSimObjectId + ".blendSrc"));
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".blendSrc", value.ToString());
          }
       }
public bool colorWriteAlpha
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".colorWriteAlpha").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".colorWriteAlpha", value.AsString());
          }
       }
public bool colorWriteBlue
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".colorWriteBlue").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".colorWriteBlue", value.AsString());
          }
       }
public bool colorWriteDefined
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".colorWriteDefined").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".colorWriteDefined", value.AsString());
          }
       }
public bool colorWriteGreen
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".colorWriteGreen").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".colorWriteGreen", value.AsString());
          }
       }
public bool colorWriteRed
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".colorWriteRed").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".colorWriteRed", value.AsString());
          }
       }
public bool cullDefined
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".cullDefined").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".cullDefined", value.AsString());
          }
       }
public TypeGFXCullMode cullMode
       {
       get
          {          return (TypeGFXCullMode)Enum.Parse(typeof(TypeGFXCullMode), dnTorque.self.GetVar(_mSimObjectId + ".cullMode"));
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".cullMode", value.ToString());
          }
       }
public bool ffLighting
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".ffLighting").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".ffLighting", value.AsString());
          }
       }
public bool samplersDefined
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".samplersDefined").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".samplersDefined", value.AsString());
          }
       }
public coGFXSamplerStateData samplerStates
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".samplerStates");
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".samplerStates", value.ToString());
          }
       }
public bool separateAlphaBlendDefined
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".separateAlphaBlendDefined").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".separateAlphaBlendDefined", value.AsString());
          }
       }
public TypeGFXBlend separateAlphaBlendDest
       {
       get
          {          return (TypeGFXBlend)Enum.Parse(typeof(TypeGFXBlend), dnTorque.self.GetVar(_mSimObjectId + ".separateAlphaBlendDest"));
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".separateAlphaBlendDest", value.ToString());
          }
       }
public bool separateAlphaBlendEnable
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".separateAlphaBlendEnable").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".separateAlphaBlendEnable", value.AsString());
          }
       }
public TypeGFXBlendOp separateAlphaBlendOp
       {
       get
          {          return (TypeGFXBlendOp)Enum.Parse(typeof(TypeGFXBlendOp), dnTorque.self.GetVar(_mSimObjectId + ".separateAlphaBlendOp"));
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".separateAlphaBlendOp", value.ToString());
          }
       }
public TypeGFXBlend separateAlphaBlendSrc
       {
       get
          {          return (TypeGFXBlend)Enum.Parse(typeof(TypeGFXBlend), dnTorque.self.GetVar(_mSimObjectId + ".separateAlphaBlendSrc"));
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".separateAlphaBlendSrc", value.ToString());
          }
       }
public bool stencilDefined
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".stencilDefined").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stencilDefined", value.AsString());
          }
       }
public bool stencilEnable
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".stencilEnable").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stencilEnable", value.AsString());
          }
       }
public TypeGFXStencilOp stencilFailOp
       {
       get
          {          return (TypeGFXStencilOp)Enum.Parse(typeof(TypeGFXStencilOp), dnTorque.self.GetVar(_mSimObjectId + ".stencilFailOp"));
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stencilFailOp", value.ToString());
          }
       }
public TypeGFXCmpFunc stencilFunc
       {
       get
          {          return (TypeGFXCmpFunc)Enum.Parse(typeof(TypeGFXCmpFunc), dnTorque.self.GetVar(_mSimObjectId + ".stencilFunc"));
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stencilFunc", value.ToString());
          }
       }
public int stencilMask
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".stencilMask").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stencilMask", value.AsString());
          }
       }
public TypeGFXStencilOp stencilPassOp
       {
       get
          {          return (TypeGFXStencilOp)Enum.Parse(typeof(TypeGFXStencilOp), dnTorque.self.GetVar(_mSimObjectId + ".stencilPassOp"));
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stencilPassOp", value.ToString());
          }
       }
public int stencilRef
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".stencilRef").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stencilRef", value.AsString());
          }
       }
public int stencilWriteMask
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".stencilWriteMask").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stencilWriteMask", value.AsString());
          }
       }
public TypeGFXStencilOp stencilZFailOp
       {
       get
          {          return (TypeGFXStencilOp)Enum.Parse(typeof(TypeGFXStencilOp), dnTorque.self.GetVar(_mSimObjectId + ".stencilZFailOp"));
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stencilZFailOp", value.ToString());
          }
       }
public ColorI textureFactor
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".textureFactor").AsColorI();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".textureFactor", value.AsString());
          }
       }
public bool vertexColorEnable
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".vertexColorEnable").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".vertexColorEnable", value.AsString());
          }
       }
public float zBias
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".zBias").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".zBias", value.AsString());
          }
       }
public bool zDefined
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".zDefined").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".zDefined", value.AsString());
          }
       }
public bool zEnable
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".zEnable").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".zEnable", value.AsString());
          }
       }
public TypeGFXCmpFunc zFunc
       {
       get
          {          return (TypeGFXCmpFunc)Enum.Parse(typeof(TypeGFXCmpFunc), dnTorque.self.GetVar(_mSimObjectId + ".zFunc"));
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".zFunc", value.ToString());
          }
       }
public float zSlopeBias
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".zSlopeBias").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".zSlopeBias", value.AsString());
          }
       }
public bool zWriteEnable
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".zWriteEnable").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".zWriteEnable", value.AsString());
          }
       }
}}
