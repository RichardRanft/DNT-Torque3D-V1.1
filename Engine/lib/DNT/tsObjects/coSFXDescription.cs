
// Copyright (C) 2012 Winterleaf Entertainment L,L,C.
// 
// THE SOFTW ARE IS PROVIDED ON AN “ AS IS” BASIS, WITHOUT W ARRANTY OF ANY KIND,
// INCLUDING WITHOUT LIMIT ATION THE W ARRANTIES OF MERCHANT ABILITY, FITNESS
// FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT . THE ENTIRE RISK AS TO THE
// QUALITY AND PERFORMANCE OF THE SOFTW ARE IS THE RESPONSIBILITY OF LICENSEE.
// SHOULD THE SOFTW ARE PROVE DEFECTIVE IN ANY RESPECT , LICENSEE AND NOT LICEN -
// SOR OR ITS SUPPLIERS OR RESELLERS ASSUMES THE ENTIRE COST OF AN Y SERVICE AND
// REPAIR. THIS DISCLAIMER OF W ARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS
// AGREEMENT. NO USE OF THE SOFTW ARE IS AUTHORIZED HEREUNDER EXCEPT UNDER
// THIS DISCLAIMER.
// 
// The use of the WinterLeaf Entertainment LLC DotNetT orque (“DNT ”) and DotNetT orque
// Customizer (“DNTC”)is governed by this license agreement (“ Agreement”).
// 
// R E S T R I C T I O N S
// 
// (a) Licensee may not: (i) create any derivative works of DNTC, including but not
// limited to translations, localizations, technology add-ons, or game making software
// other than Games; (ii) reverse engineer , or otherwise attempt to derive the algorithms
// for DNT or DNTC (iii) redistribute, encumber , sell, rent, lease, sublicense, or otherwise
// transfer rights to  DNTC; or (iv) remove or alter any tra demark, logo, copyright
// or other proprietary notices, legends, symbols or labels in DNT or DNTC; or (iiv) use
// the Software to develop or distribute any software that compete s with the Software
// without WinterLeaf Entertainment’s prior written consent; or (i iiv) use the Software for
// any illegal purpose.
// (b) Licensee may not distribute the DNTC in any manner.
// 
// LI C E N S E G R A N T .
// This license allows companies of any size, government entities or individuals to cre -
// ate, sell, rent, lease, or otherwise profit commercially from, games using executables
// created from the source code of DNT
// 
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// THE SOURCE CODE GENERATED BY DNTC CAN BE  DISTRIBUTED PUBLICLY PROVIDED THAT THE 
// DISTRIBUTOR PROVIDES  THE GENERATE SOURCE CODE FREE OF CHARGE.
// 
// THIS SOURCE CODE (DNT) CAN BE DISTRIBUTED PUBLICLY PROVIDED THAT THE DISTRIBUTOR 
// PROVIDES  THE SOURCE CODE (DNT) FREE OF CHARGE.
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// 
// Please visit http://www.winterleafentertainment.com for more information about the project and latest updates.

#region
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using WinterLeaf.Classes;
using WinterLeaf.Containers;
using WinterLeaf.Enums;
using System.ComponentModel;
#endregion

namespace WinterLeaf.tsObjects
    {
    /// <summary>
    /// 
    /// </summary>
    internal class tsObjectConvertercoSFXDescription : TypeConverter
        {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="sourceType"></param>
        /// <returns></returns>
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
            {
            return (typeof(string) == sourceType);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="culture"></param>
        /// <param name="value"></param>
        /// <returns></returns>
        public override object ConvertFrom(ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value)
            {
            if (value is string)
                {
                return new coSFXDescription(value as string);
                }

            return null;
            }
        }

      
    /// <summary>
    /// 
    /// </summary>
    [TypeConverter(typeof(tsObjectConvertercoSFXDescription))]
    public class coSFXDescription: coSimDataBlock
{
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
public coSFXDescription(string simobjectid) : base(simobjectid){ }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
public coSFXDescription(uint simobjectid): base(simobjectid){ }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
public coSFXDescription(int simobjectid): base(simobjectid){ }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator ==(coSFXDescription ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return object.ReferenceEquals(simobjectid, null);
            return ts.Equals(simobjectid);


            }
  /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public override int GetHashCode()
            {
            throw new NotImplementedException();
            }
  /// <summary>
        /// 
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        public override bool Equals(object obj)
            {
            
            return (this._mSimObjectId ==(string)myReflections.ChangeType( obj,typeof(string)));
            }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator !=(coSFXDescription ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return !object.ReferenceEquals(simobjectid, null);
            return !ts.Equals(simobjectid);

            }


            /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator string( coSFXDescription ts)
            {
            return ts._mSimObjectId;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coSFXDescription(string ts)
            {
            return new coSFXDescription(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator int( coSFXDescription ts)
            {
            int i;
            return int.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coSFXDescription(int ts)
            {
            return new coSFXDescription(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator uint( coSFXDescription ts)
            {
            uint i;
            return uint.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coSFXDescription(uint ts)
            {
            return new coSFXDescription(ts);
            }
public int coneInsideAngle
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".coneInsideAngle").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".coneInsideAngle", value.AsString());
          }
       }
public int coneOutsideAngle
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".coneOutsideAngle").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".coneOutsideAngle", value.AsString());
          }
       }
public float coneOutsideVolume
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".coneOutsideVolume").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".coneOutsideVolume", value.AsString());
          }
       }
public EaseF fadeInEase
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".fadeInEase").AsEaseF();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".fadeInEase", value.AsString());
          }
       }
public float fadeInTime
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".fadeInTime").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".fadeInTime", value.AsString());
          }
       }
public bool fadeLoops
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".fadeLoops").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".fadeLoops", value.AsString());
          }
       }
public EaseF fadeOutEase
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".fadeOutEase").AsEaseF();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".fadeOutEase", value.AsString());
          }
       }
public float fadeOutTime
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".fadeOutTime").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".fadeOutTime", value.AsString());
          }
       }
public bool is3D
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".is3D").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".is3D", value.AsString());
          }
       }
public bool isLooping
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".isLooping").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".isLooping", value.AsString());
          }
       }
public bool isStreaming
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".isStreaming").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".isStreaming", value.AsString());
          }
       }
public float maxDistance
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".maxDistance").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".maxDistance", value.AsString());
          }
       }
public String parameters
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".parameters").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".parameters", value.AsString());
          }
       }
public float pitch
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".pitch").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".pitch", value.AsString());
          }
       }
public float priority
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".priority").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".priority", value.AsString());
          }
       }
public float referenceDistance
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".referenceDistance").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".referenceDistance", value.AsString());
          }
       }
public float reverbAirAbsorptionFactor
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".reverbAirAbsorptionFactor").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".reverbAirAbsorptionFactor", value.AsString());
          }
       }
public int reverbDirect
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".reverbDirect").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".reverbDirect", value.AsString());
          }
       }
public int reverbDirectHF
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".reverbDirectHF").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".reverbDirectHF", value.AsString());
          }
       }
public float reverbDopplerFactor
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".reverbDopplerFactor").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".reverbDopplerFactor", value.AsString());
          }
       }
public int reverbExclusion
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".reverbExclusion").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".reverbExclusion", value.AsString());
          }
       }
public float reverbExclusionLFRatio
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".reverbExclusionLFRatio").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".reverbExclusionLFRatio", value.AsString());
          }
       }
public int reverbFlags
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".reverbFlags").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".reverbFlags", value.AsString());
          }
       }
public int reverbObstruction
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".reverbObstruction").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".reverbObstruction", value.AsString());
          }
       }
public float reverbObstructionLFRatio
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".reverbObstructionLFRatio").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".reverbObstructionLFRatio", value.AsString());
          }
       }
public int reverbOcclusion
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".reverbOcclusion").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".reverbOcclusion", value.AsString());
          }
       }
public float reverbOcclusionDirectRatio
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".reverbOcclusionDirectRatio").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".reverbOcclusionDirectRatio", value.AsString());
          }
       }
public float reverbOcclusionLFRatio
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".reverbOcclusionLFRatio").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".reverbOcclusionLFRatio", value.AsString());
          }
       }
public float reverbOcclusionRoomRatio
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".reverbOcclusionRoomRatio").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".reverbOcclusionRoomRatio", value.AsString());
          }
       }
public int reverbOutsideVolumeHF
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".reverbOutsideVolumeHF").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".reverbOutsideVolumeHF", value.AsString());
          }
       }
public float reverbReverbRolloffFactor
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".reverbReverbRolloffFactor").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".reverbReverbRolloffFactor", value.AsString());
          }
       }
public int reverbRoom
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".reverbRoom").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".reverbRoom", value.AsString());
          }
       }
public int reverbRoomHF
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".reverbRoomHF").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".reverbRoomHF", value.AsString());
          }
       }
public float reverbRoomRolloffFactor
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".reverbRoomRolloffFactor").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".reverbRoomRolloffFactor", value.AsString());
          }
       }
public float rolloffFactor
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".rolloffFactor").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".rolloffFactor", value.AsString());
          }
       }
public Point3F scatterDistance
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".scatterDistance").AsPoint3F();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".scatterDistance", value.AsString());
          }
       }
public coSFXSource sourceGroup
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".sourceGroup");
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".sourceGroup", value.ToString());
          }
       }
public int streamPacketSize
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".streamPacketSize").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".streamPacketSize", value.AsString());
          }
       }
public int streamReadAhead
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".streamReadAhead").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".streamReadAhead", value.AsString());
          }
       }
public bool useCustomReverb
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".useCustomReverb").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".useCustomReverb", value.AsString());
          }
       }
public bool useHardware
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".useHardware").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".useHardware", value.AsString());
          }
       }
public float volume
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".volume").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".volume", value.AsString());
          }
       }
}}
