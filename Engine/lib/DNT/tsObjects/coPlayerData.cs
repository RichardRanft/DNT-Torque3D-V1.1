
// Copyright (C) 2012 Winterleaf Entertainment L,L,C.
// 
// THE SOFTW ARE IS PROVIDED ON AN “ AS IS” BASIS, WITHOUT W ARRANTY OF ANY KIND,
// INCLUDING WITHOUT LIMIT ATION THE W ARRANTIES OF MERCHANT ABILITY, FITNESS
// FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT . THE ENTIRE RISK AS TO THE
// QUALITY AND PERFORMANCE OF THE SOFTW ARE IS THE RESPONSIBILITY OF LICENSEE.
// SHOULD THE SOFTW ARE PROVE DEFECTIVE IN ANY RESPECT , LICENSEE AND NOT LICEN -
// SOR OR ITS SUPPLIERS OR RESELLERS ASSUMES THE ENTIRE COST OF AN Y SERVICE AND
// REPAIR. THIS DISCLAIMER OF W ARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS
// AGREEMENT. NO USE OF THE SOFTW ARE IS AUTHORIZED HEREUNDER EXCEPT UNDER
// THIS DISCLAIMER.
// 
// The use of the WinterLeaf Entertainment LLC DotNetT orque (“DNT ”) and DotNetT orque
// Customizer (“DNTC”)is governed by this license agreement (“ Agreement”).
// 
// R E S T R I C T I O N S
// 
// (a) Licensee may not: (i) create any derivative works of DNTC, including but not
// limited to translations, localizations, technology add-ons, or game making software
// other than Games; (ii) reverse engineer , or otherwise attempt to derive the algorithms
// for DNT or DNTC (iii) redistribute, encumber , sell, rent, lease, sublicense, or otherwise
// transfer rights to  DNTC; or (iv) remove or alter any tra demark, logo, copyright
// or other proprietary notices, legends, symbols or labels in DNT or DNTC; or (iiv) use
// the Software to develop or distribute any software that compete s with the Software
// without WinterLeaf Entertainment’s prior written consent; or (i iiv) use the Software for
// any illegal purpose.
// (b) Licensee may not distribute the DNTC in any manner.
// 
// LI C E N S E G R A N T .
// This license allows companies of any size, government entities or individuals to cre -
// ate, sell, rent, lease, or otherwise profit commercially from, games using executables
// created from the source code of DNT
// 
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// THE SOURCE CODE GENERATED BY DNTC CAN BE  DISTRIBUTED PUBLICLY PROVIDED THAT THE 
// DISTRIBUTOR PROVIDES  THE GENERATE SOURCE CODE FREE OF CHARGE.
// 
// THIS SOURCE CODE (DNT) CAN BE DISTRIBUTED PUBLICLY PROVIDED THAT THE DISTRIBUTOR 
// PROVIDES  THE SOURCE CODE (DNT) FREE OF CHARGE.
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// 
// Please visit http://www.winterleafentertainment.com for more information about the project and latest updates.

#region
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using WinterLeaf.Classes;
using WinterLeaf.Containers;
using WinterLeaf.Enums;
using System.ComponentModel;
#endregion

namespace WinterLeaf.tsObjects
    {
    /// <summary>
    /// 
    /// </summary>
    internal class tsObjectConvertercoPlayerData : TypeConverter
        {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="sourceType"></param>
        /// <returns></returns>
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
            {
            return (typeof(string) == sourceType);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="culture"></param>
        /// <param name="value"></param>
        /// <returns></returns>
        public override object ConvertFrom(ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value)
            {
            if (value is string)
                {
                return new coPlayerData(value as string);
                }

            return null;
            }
        }

      
    /// <summary>
    /// 
    /// </summary>
    [TypeConverter(typeof(tsObjectConvertercoPlayerData))]
    public class coPlayerData: coShapeBaseData
{
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
public coPlayerData(string simobjectid) : base(simobjectid){ }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
public coPlayerData(uint simobjectid): base(simobjectid){ }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
public coPlayerData(int simobjectid): base(simobjectid){ }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator ==(coPlayerData ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return object.ReferenceEquals(simobjectid, null);
            return ts.Equals(simobjectid);


            }
  /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public override int GetHashCode()
            {
            throw new NotImplementedException();
            }
  /// <summary>
        /// 
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        public override bool Equals(object obj)
            {
            
            return (this._mSimObjectId ==(string)myReflections.ChangeType( obj,typeof(string)));
            }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator !=(coPlayerData ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return !object.ReferenceEquals(simobjectid, null);
            return !ts.Equals(simobjectid);

            }


            /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator string( coPlayerData ts)
            {
            return ts._mSimObjectId;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coPlayerData(string ts)
            {
            return new coPlayerData(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator int( coPlayerData ts)
            {
            int i;
            return int.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coPlayerData(int ts)
            {
            return new coPlayerData(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator uint( coPlayerData ts)
            {
            uint i;
            return uint.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coPlayerData(uint ts)
            {
            return new coPlayerData(ts);
            }
public float airControl
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".airControl").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".airControl", value.AsString());
          }
       }
public bool allowImageStateAnimation
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".allowImageStateAnimation").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".allowImageStateAnimation", value.AsString());
          }
       }
public Point3F boundingBox
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".boundingBox").AsPoint3F();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".boundingBox", value.AsString());
          }
       }
public float boxHeadBackPercentage
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".boxHeadBackPercentage").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".boxHeadBackPercentage", value.AsString());
          }
       }
public float boxHeadFrontPercentage
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".boxHeadFrontPercentage").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".boxHeadFrontPercentage", value.AsString());
          }
       }
public float boxHeadLeftPercentage
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".boxHeadLeftPercentage").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".boxHeadLeftPercentage", value.AsString());
          }
       }
public float boxHeadPercentage
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".boxHeadPercentage").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".boxHeadPercentage", value.AsString());
          }
       }
public float boxHeadRightPercentage
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".boxHeadRightPercentage").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".boxHeadRightPercentage", value.AsString());
          }
       }
public float boxTorsoPercentage
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".boxTorsoPercentage").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".boxTorsoPercentage", value.AsString());
          }
       }
public float bubbleEmitTime
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".bubbleEmitTime").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".bubbleEmitTime", value.AsString());
          }
       }
public Point3F crouchBoundingBox
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".crouchBoundingBox").AsPoint3F();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".crouchBoundingBox", value.AsString());
          }
       }
public float crouchForce
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".crouchForce").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".crouchForce", value.AsString());
          }
       }
public coDecalData decalData
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".decalData");
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".decalData", value.ToString());
          }
       }
public float decalOffset
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".decalOffset").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".decalOffset", value.AsString());
          }
       }
public coParticleEmitterData dustEmitter
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".dustEmitter");
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".dustEmitter", value.ToString());
          }
       }
public coSFXTrack exitingWater
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".exitingWater");
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".exitingWater", value.ToString());
          }
       }
public float exitSplashSoundVelocity
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".exitSplashSoundVelocity").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".exitSplashSoundVelocity", value.AsString());
          }
       }
public float fallingSpeedThreshold
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".fallingSpeedThreshold").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".fallingSpeedThreshold", value.AsString());
          }
       }
public bool firstPersonShadows
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".firstPersonShadows").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".firstPersonShadows", value.AsString());
          }
       }
public coSFXTrack FootBubblesSound
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".FootBubblesSound");
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".FootBubblesSound", value.ToString());
          }
       }
public coSFXTrack FootHardSound
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".FootHardSound");
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".FootHardSound", value.ToString());
          }
       }
public coSFXTrack FootMetalSound
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".FootMetalSound");
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".FootMetalSound", value.ToString());
          }
       }
public coParticleEmitterData footPuffEmitter
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".footPuffEmitter");
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".footPuffEmitter", value.ToString());
          }
       }
public int footPuffNumParts
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".footPuffNumParts").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".footPuffNumParts", value.AsString());
          }
       }
public float footPuffRadius
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".footPuffRadius").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".footPuffRadius", value.AsString());
          }
       }
public coSFXTrack FootShallowSound
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".FootShallowSound");
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".FootShallowSound", value.ToString());
          }
       }
public coSFXTrack FootSnowSound
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".FootSnowSound");
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".FootSnowSound", value.ToString());
          }
       }
public coSFXTrack FootSoftSound
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".FootSoftSound");
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".FootSoftSound", value.ToString());
          }
       }
public float footstepSplashHeight
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".footstepSplashHeight").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".footstepSplashHeight", value.AsString());
          }
       }
public coSFXTrack FootUnderwaterSound
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".FootUnderwaterSound");
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".FootUnderwaterSound", value.ToString());
          }
       }
public coSFXTrack FootWadingSound
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".FootWadingSound");
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".FootWadingSound", value.ToString());
          }
       }
public float groundImpactMinSpeed
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".groundImpactMinSpeed").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".groundImpactMinSpeed", value.AsString());
          }
       }
public Point3F groundImpactShakeAmp
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".groundImpactShakeAmp").AsPoint3F();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".groundImpactShakeAmp", value.AsString());
          }
       }
public float groundImpactShakeDuration
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".groundImpactShakeDuration").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".groundImpactShakeDuration", value.AsString());
          }
       }
public float groundImpactShakeFalloff
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".groundImpactShakeFalloff").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".groundImpactShakeFalloff", value.AsString());
          }
       }
public Point3F groundImpactShakeFreq
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".groundImpactShakeFreq").AsPoint3F();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".groundImpactShakeFreq", value.AsString());
          }
       }
public float hardSplashSoundVelocity
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".hardSplashSoundVelocity").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".hardSplashSoundVelocity", value.AsString());
          }
       }
public float horizMaxSpeed
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".horizMaxSpeed").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".horizMaxSpeed", value.AsString());
          }
       }
public float horizResistFactor
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".horizResistFactor").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".horizResistFactor", value.AsString());
          }
       }
public float horizResistSpeed
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".horizResistSpeed").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".horizResistSpeed", value.AsString());
          }
       }
public String imageAnimPrefix
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".imageAnimPrefix").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".imageAnimPrefix", value.AsString());
          }
       }
public String imageAnimPrefixFP
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".imageAnimPrefixFP").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".imageAnimPrefixFP", value.AsString());
          }
       }
public coSFXTrack impactHardSound
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".impactHardSound");
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".impactHardSound", value.ToString());
          }
       }
public coSFXTrack impactMetalSound
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".impactMetalSound");
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".impactMetalSound", value.ToString());
          }
       }
public coSFXTrack impactSnowSound
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".impactSnowSound");
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".impactSnowSound", value.ToString());
          }
       }
public coSFXTrack impactSoftSound
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".impactSoftSound");
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".impactSoftSound", value.ToString());
          }
       }
public coSFXTrack impactWaterEasy
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".impactWaterEasy");
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".impactWaterEasy", value.ToString());
          }
       }
public coSFXTrack impactWaterHard
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".impactWaterHard");
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".impactWaterHard", value.ToString());
          }
       }
public coSFXTrack impactWaterMedium
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".impactWaterMedium");
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".impactWaterMedium", value.ToString());
          }
       }
public float jetJumpEnergyDrain
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".jetJumpEnergyDrain").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".jetJumpEnergyDrain", value.AsString());
          }
       }
public float jetJumpForce
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".jetJumpForce").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".jetJumpForce", value.AsString());
          }
       }
public float jetJumpSurfaceAngle
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".jetJumpSurfaceAngle").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".jetJumpSurfaceAngle", value.AsString());
          }
       }
public float jetMaxJumpSpeed
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".jetMaxJumpSpeed").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".jetMaxJumpSpeed", value.AsString());
          }
       }
public float jetMinJumpEnergy
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".jetMinJumpEnergy").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".jetMinJumpEnergy", value.AsString());
          }
       }
public float jetMinJumpSpeed
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".jetMinJumpSpeed").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".jetMinJumpSpeed", value.AsString());
          }
       }
public int jumpDelay
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".jumpDelay").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".jumpDelay", value.AsString());
          }
       }
public float jumpEnergyDrain
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".jumpEnergyDrain").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".jumpEnergyDrain", value.AsString());
          }
       }
public float jumpForce
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".jumpForce").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".jumpForce", value.AsString());
          }
       }
public float jumpSurfaceAngle
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".jumpSurfaceAngle").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".jumpSurfaceAngle", value.AsString());
          }
       }
public bool jumpTowardsNormal
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".jumpTowardsNormal").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".jumpTowardsNormal", value.AsString());
          }
       }
public float landSequenceTime
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".landSequenceTime").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".landSequenceTime", value.AsString());
          }
       }
public float maxBackwardSpeed
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".maxBackwardSpeed").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".maxBackwardSpeed", value.AsString());
          }
       }
public float maxCrouchBackwardSpeed
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".maxCrouchBackwardSpeed").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".maxCrouchBackwardSpeed", value.AsString());
          }
       }
public float maxCrouchForwardSpeed
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".maxCrouchForwardSpeed").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".maxCrouchForwardSpeed", value.AsString());
          }
       }
public float maxCrouchSideSpeed
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".maxCrouchSideSpeed").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".maxCrouchSideSpeed", value.AsString());
          }
       }
public float maxForwardSpeed
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".maxForwardSpeed").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".maxForwardSpeed", value.AsString());
          }
       }
public float maxFreelookAngle
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".maxFreelookAngle").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".maxFreelookAngle", value.AsString());
          }
       }
public float maxJumpSpeed
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".maxJumpSpeed").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".maxJumpSpeed", value.AsString());
          }
       }
public float maxLookAngle
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".maxLookAngle").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".maxLookAngle", value.AsString());
          }
       }
public float maxProneBackwardSpeed
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".maxProneBackwardSpeed").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".maxProneBackwardSpeed", value.AsString());
          }
       }
public float maxProneForwardSpeed
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".maxProneForwardSpeed").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".maxProneForwardSpeed", value.AsString());
          }
       }
public float maxProneSideSpeed
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".maxProneSideSpeed").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".maxProneSideSpeed", value.AsString());
          }
       }
public float maxSideSpeed
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".maxSideSpeed").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".maxSideSpeed", value.AsString());
          }
       }
public float maxSprintBackwardSpeed
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".maxSprintBackwardSpeed").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".maxSprintBackwardSpeed", value.AsString());
          }
       }
public float maxSprintForwardSpeed
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".maxSprintForwardSpeed").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".maxSprintForwardSpeed", value.AsString());
          }
       }
public float maxSprintSideSpeed
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".maxSprintSideSpeed").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".maxSprintSideSpeed", value.AsString());
          }
       }
public float maxStepHeight
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".maxStepHeight").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".maxStepHeight", value.AsString());
          }
       }
public float maxTimeScale
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".maxTimeScale").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".maxTimeScale", value.AsString());
          }
       }
public float maxUnderwaterBackwardSpeed
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".maxUnderwaterBackwardSpeed").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".maxUnderwaterBackwardSpeed", value.AsString());
          }
       }
public float maxUnderwaterForwardSpeed
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".maxUnderwaterForwardSpeed").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".maxUnderwaterForwardSpeed", value.AsString());
          }
       }
public float maxUnderwaterSideSpeed
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".maxUnderwaterSideSpeed").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".maxUnderwaterSideSpeed", value.AsString());
          }
       }
public float mediumSplashSoundVelocity
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".mediumSplashSoundVelocity").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".mediumSplashSoundVelocity", value.AsString());
          }
       }
public float minImpactSpeed
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".minImpactSpeed").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".minImpactSpeed", value.AsString());
          }
       }
public float minJumpEnergy
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".minJumpEnergy").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".minJumpEnergy", value.AsString());
          }
       }
public float minJumpSpeed
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".minJumpSpeed").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".minJumpSpeed", value.AsString());
          }
       }
public float minLateralImpactSpeed
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".minLateralImpactSpeed").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".minLateralImpactSpeed", value.AsString());
          }
       }
public float minLookAngle
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".minLookAngle").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".minLookAngle", value.AsString());
          }
       }
public float minRunEnergy
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".minRunEnergy").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".minRunEnergy", value.AsString());
          }
       }
public float minSprintEnergy
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".minSprintEnergy").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".minSprintEnergy", value.AsString());
          }
       }
public coSFXTrack movingBubblesSound
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".movingBubblesSound");
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".movingBubblesSound", value.ToString());
          }
       }
public String physicsPlayerType
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".physicsPlayerType").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".physicsPlayerType", value.AsString());
          }
       }
public float pickupRadius
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".pickupRadius").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".pickupRadius", value.AsString());
          }
       }
public Point3F proneBoundingBox
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".proneBoundingBox").AsPoint3F();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".proneBoundingBox", value.AsString());
          }
       }
public float proneForce
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".proneForce").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".proneForce", value.AsString());
          }
       }
public int recoverDelay
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".recoverDelay").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".recoverDelay", value.AsString());
          }
       }
public float recoverRunForceScale
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".recoverRunForceScale").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".recoverRunForceScale", value.AsString());
          }
       }
public bool renderFirstPerson
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".renderFirstPerson").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".renderFirstPerson", value.AsString());
          }
       }
public float runEnergyDrain
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".runEnergyDrain").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".runEnergyDrain", value.AsString());
          }
       }
public float runForce
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".runForce").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".runForce", value.AsString());
          }
       }
public float runSurfaceAngle
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".runSurfaceAngle").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".runSurfaceAngle", value.AsString());
          }
       }
public String shapeNameFP
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".shapeNameFP").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".shapeNameFP", value.AsString());
          }
       }
public coSplashData splash
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".splash");
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".splash", value.ToString());
          }
       }
public float splashAngle
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".splashAngle").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".splashAngle", value.AsString());
          }
       }
public coParticleEmitterData splashEmitter
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".splashEmitter");
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".splashEmitter", value.ToString());
          }
       }
public float splashFreqMod
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".splashFreqMod").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".splashFreqMod", value.AsString());
          }
       }
public float splashVelEpsilon
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".splashVelEpsilon").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".splashVelEpsilon", value.AsString());
          }
       }
public float splashVelocity
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".splashVelocity").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".splashVelocity", value.AsString());
          }
       }
public bool sprintCanJump
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".sprintCanJump").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".sprintCanJump", value.AsString());
          }
       }
public float sprintEnergyDrain
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".sprintEnergyDrain").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".sprintEnergyDrain", value.AsString());
          }
       }
public float sprintForce
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".sprintForce").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".sprintForce", value.AsString());
          }
       }
public float sprintPitchScale
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".sprintPitchScale").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".sprintPitchScale", value.AsString());
          }
       }
public float sprintStrafeScale
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".sprintStrafeScale").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".sprintStrafeScale", value.AsString());
          }
       }
public float sprintYawScale
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".sprintYawScale").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".sprintYawScale", value.AsString());
          }
       }
public Point3F swimBoundingBox
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".swimBoundingBox").AsPoint3F();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".swimBoundingBox", value.AsString());
          }
       }
public float swimForce
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".swimForce").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".swimForce", value.AsString());
          }
       }
public bool transitionToLand
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".transitionToLand").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".transitionToLand", value.AsString());
          }
       }
public float upMaxSpeed
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".upMaxSpeed").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".upMaxSpeed", value.AsString());
          }
       }
public float upResistFactor
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".upResistFactor").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".upResistFactor", value.AsString());
          }
       }
public float upResistSpeed
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".upResistSpeed").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".upResistSpeed", value.AsString());
          }
       }
public coSFXTrack waterBreathSound
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".waterBreathSound");
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".waterBreathSound", value.ToString());
          }
       }
}}
