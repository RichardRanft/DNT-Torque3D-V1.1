
// Copyright (C) 2012 Winterleaf Entertainment L,L,C.
// 
// THE SOFTW ARE IS PROVIDED ON AN “ AS IS” BASIS, WITHOUT W ARRANTY OF ANY KIND,
// INCLUDING WITHOUT LIMIT ATION THE W ARRANTIES OF MERCHANT ABILITY, FITNESS
// FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT . THE ENTIRE RISK AS TO THE
// QUALITY AND PERFORMANCE OF THE SOFTW ARE IS THE RESPONSIBILITY OF LICENSEE.
// SHOULD THE SOFTW ARE PROVE DEFECTIVE IN ANY RESPECT , LICENSEE AND NOT LICEN -
// SOR OR ITS SUPPLIERS OR RESELLERS ASSUMES THE ENTIRE COST OF AN Y SERVICE AND
// REPAIR. THIS DISCLAIMER OF W ARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS
// AGREEMENT. NO USE OF THE SOFTW ARE IS AUTHORIZED HEREUNDER EXCEPT UNDER
// THIS DISCLAIMER.
// 
// The use of the WinterLeaf Entertainment LLC DotNetT orque (“DNT ”) and DotNetT orque
// Customizer (“DNTC”)is governed by this license agreement (“ Agreement”).
// 
// R E S T R I C T I O N S
// 
// (a) Licensee may not: (i) create any derivative works of DNTC, including but not
// limited to translations, localizations, technology add-ons, or game making software
// other than Games; (ii) reverse engineer , or otherwise attempt to derive the algorithms
// for DNT or DNTC (iii) redistribute, encumber , sell, rent, lease, sublicense, or otherwise
// transfer rights to  DNTC; or (iv) remove or alter any tra demark, logo, copyright
// or other proprietary notices, legends, symbols or labels in DNT or DNTC; or (iiv) use
// the Software to develop or distribute any software that compete s with the Software
// without WinterLeaf Entertainment’s prior written consent; or (i iiv) use the Software for
// any illegal purpose.
// (b) Licensee may not distribute the DNTC in any manner.
// 
// LI C E N S E G R A N T .
// This license allows companies of any size, government entities or individuals to cre -
// ate, sell, rent, lease, or otherwise profit commercially from, games using executables
// created from the source code of DNT
// 
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// THE SOURCE CODE GENERATED BY DNTC CAN BE  DISTRIBUTED PUBLICLY PROVIDED THAT THE 
// DISTRIBUTOR PROVIDES  THE GENERATE SOURCE CODE FREE OF CHARGE.
// 
// THIS SOURCE CODE (DNT) CAN BE DISTRIBUTED PUBLICLY PROVIDED THAT THE DISTRIBUTOR 
// PROVIDES  THE SOURCE CODE (DNT) FREE OF CHARGE.
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// 
// Please visit http://www.winterleafentertainment.com for more information about the project and latest updates.

#region
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using WinterLeaf.Classes;
using WinterLeaf.Containers;
using WinterLeaf.Enums;
using System.ComponentModel;
#endregion

namespace WinterLeaf.tsObjects
    {
    /// <summary>
    /// 
    /// </summary>
    internal class tsObjectConvertercoLevelInfo : TypeConverter
        {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="sourceType"></param>
        /// <returns></returns>
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
            {
            return (typeof(string) == sourceType);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="culture"></param>
        /// <param name="value"></param>
        /// <returns></returns>
        public override object ConvertFrom(ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value)
            {
            if (value is string)
                {
                return new coLevelInfo(value as string);
                }

            return null;
            }
        }

      
    /// <summary>
    /// 
    /// </summary>
    [TypeConverter(typeof(tsObjectConvertercoLevelInfo))]
    public class coLevelInfo: coNetObject
{
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
public coLevelInfo(string simobjectid) : base(simobjectid){ }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
public coLevelInfo(uint simobjectid): base(simobjectid){ }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
public coLevelInfo(int simobjectid): base(simobjectid){ }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator ==(coLevelInfo ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return object.ReferenceEquals(simobjectid, null);
            return ts.Equals(simobjectid);


            }
  /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public override int GetHashCode()
            {
            throw new NotImplementedException();
            }
  /// <summary>
        /// 
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        public override bool Equals(object obj)
            {
            
            return (this._mSimObjectId ==(string)myReflections.ChangeType( obj,typeof(string)));
            }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator !=(coLevelInfo ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return !object.ReferenceEquals(simobjectid, null);
            return !ts.Equals(simobjectid);

            }


            /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator string( coLevelInfo ts)
            {
            return ts._mSimObjectId;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coLevelInfo(string ts)
            {
            return new coLevelInfo(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator int( coLevelInfo ts)
            {
            int i;
            return int.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coLevelInfo(int ts)
            {
            return new coLevelInfo(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator uint( coLevelInfo ts)
            {
            uint i;
            return uint.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coLevelInfo(uint ts)
            {
            return new coLevelInfo(ts);
            }
public bool advancedLightmapSupport
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".advancedLightmapSupport").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".advancedLightmapSupport", value.AsString());
          }
       }
public EaseF ambientLightBlendCurve
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".ambientLightBlendCurve").AsEaseF();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".ambientLightBlendCurve", value.AsString());
          }
       }
public float ambientLightBlendPhase
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".ambientLightBlendPhase").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".ambientLightBlendPhase", value.AsString());
          }
       }
public ColorI canvasClearColor
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".canvasClearColor").AsColorI();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".canvasClearColor", value.AsString());
          }
       }
public float decalBias
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".decalBias").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".decalBias", value.AsString());
          }
       }
public float fogAtmosphereHeight
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".fogAtmosphereHeight").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".fogAtmosphereHeight", value.AsString());
          }
       }
public ColorF fogColor
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".fogColor").AsColorF();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".fogColor", value.AsString());
          }
       }
public float fogDensity
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".fogDensity").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".fogDensity", value.AsString());
          }
       }
public float fogDensityOffset
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".fogDensityOffset").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".fogDensityOffset", value.AsString());
          }
       }
public float nearClip
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".nearClip").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".nearClip", value.AsString());
          }
       }
public coSFXAmbience soundAmbience
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".soundAmbience");
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".soundAmbience", value.ToString());
          }
       }
public TypeSFXDistanceModel soundDistanceModel
       {
       get
          {          return (TypeSFXDistanceModel)Enum.Parse(typeof(TypeSFXDistanceModel), dnTorque.self.GetVar(_mSimObjectId + ".soundDistanceModel"));
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".soundDistanceModel", value.ToString());
          }
       }
public float visibleDistance
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".visibleDistance").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".visibleDistance", value.AsString());
          }
       }
public float visibleDistance_Ghost
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".visibleDistance_Ghost").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".visibleDistance_Ghost", value.AsString());
          }
       }
}}
