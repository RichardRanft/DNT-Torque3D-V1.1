
// Copyright (C) 2012 Winterleaf Entertainment L,L,C.
// 
// THE SOFTW ARE IS PROVIDED ON AN “ AS IS” BASIS, WITHOUT W ARRANTY OF ANY KIND,
// INCLUDING WITHOUT LIMIT ATION THE W ARRANTIES OF MERCHANT ABILITY, FITNESS
// FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT . THE ENTIRE RISK AS TO THE
// QUALITY AND PERFORMANCE OF THE SOFTW ARE IS THE RESPONSIBILITY OF LICENSEE.
// SHOULD THE SOFTW ARE PROVE DEFECTIVE IN ANY RESPECT , LICENSEE AND NOT LICEN -
// SOR OR ITS SUPPLIERS OR RESELLERS ASSUMES THE ENTIRE COST OF AN Y SERVICE AND
// REPAIR. THIS DISCLAIMER OF W ARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS
// AGREEMENT. NO USE OF THE SOFTW ARE IS AUTHORIZED HEREUNDER EXCEPT UNDER
// THIS DISCLAIMER.
// 
// The use of the WinterLeaf Entertainment LLC DotNetT orque (“DNT ”) and DotNetT orque
// Customizer (“DNTC”)is governed by this license agreement (“ Agreement”).
// 
// R E S T R I C T I O N S
// 
// (a) Licensee may not: (i) create any derivative works of DNTC, including but not
// limited to translations, localizations, technology add-ons, or game making software
// other than Games; (ii) reverse engineer , or otherwise attempt to derive the algorithms
// for DNT or DNTC (iii) redistribute, encumber , sell, rent, lease, sublicense, or otherwise
// transfer rights to  DNTC; or (iv) remove or alter any tra demark, logo, copyright
// or other proprietary notices, legends, symbols or labels in DNT or DNTC; or (iiv) use
// the Software to develop or distribute any software that compete s with the Software
// without WinterLeaf Entertainment’s prior written consent; or (i iiv) use the Software for
// any illegal purpose.
// (b) Licensee may not distribute the DNTC in any manner.
// 
// LI C E N S E G R A N T .
// This license allows companies of any size, government entities or individuals to cre -
// ate, sell, rent, lease, or otherwise profit commercially from, games using executables
// created from the source code of DNT
// 
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// THE SOURCE CODE GENERATED BY DNTC CAN BE  DISTRIBUTED PUBLICLY PROVIDED THAT THE 
// DISTRIBUTOR PROVIDES  THE GENERATE SOURCE CODE FREE OF CHARGE.
// 
// THIS SOURCE CODE (DNT) CAN BE DISTRIBUTED PUBLICLY PROVIDED THAT THE DISTRIBUTOR 
// PROVIDES  THE SOURCE CODE (DNT) FREE OF CHARGE.
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// 
// Please visit http://www.winterleafentertainment.com for more information about the project and latest updates.

#region
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using WinterLeaf.Classes;
using WinterLeaf.Containers;
using WinterLeaf.Enums;
using System.ComponentModel;
#endregion

namespace WinterLeaf.tsObjects
    {
    /// <summary>
    /// 
    /// </summary>
    internal class tsObjectConvertercoHoverVehicleData : TypeConverter
        {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="sourceType"></param>
        /// <returns></returns>
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
            {
            return (typeof(string) == sourceType);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="culture"></param>
        /// <param name="value"></param>
        /// <returns></returns>
        public override object ConvertFrom(ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value)
            {
            if (value is string)
                {
                return new coHoverVehicleData(value as string);
                }

            return null;
            }
        }

      
    /// <summary>
    /// 
    /// </summary>
    [TypeConverter(typeof(tsObjectConvertercoHoverVehicleData))]
    public class coHoverVehicleData: coVehicleData
{
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
public coHoverVehicleData(string simobjectid) : base(simobjectid){ }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
public coHoverVehicleData(uint simobjectid): base(simobjectid){ }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
public coHoverVehicleData(int simobjectid): base(simobjectid){ }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator ==(coHoverVehicleData ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return object.ReferenceEquals(simobjectid, null);
            return ts.Equals(simobjectid);


            }
  /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public override int GetHashCode()
            {
            throw new NotImplementedException();
            }
  /// <summary>
        /// 
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        public override bool Equals(object obj)
            {
            
            return (this._mSimObjectId ==(string)myReflections.ChangeType( obj,typeof(string)));
            }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator !=(coHoverVehicleData ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return !object.ReferenceEquals(simobjectid, null);
            return !ts.Equals(simobjectid);

            }


            /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator string( coHoverVehicleData ts)
            {
            return ts._mSimObjectId;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coHoverVehicleData(string ts)
            {
            return new coHoverVehicleData(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator int( coHoverVehicleData ts)
            {
            int i;
            return int.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coHoverVehicleData(int ts)
            {
            return new coHoverVehicleData(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator uint( coHoverVehicleData ts)
            {
            uint i;
            return uint.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coHoverVehicleData(uint ts)
            {
            return new coHoverVehicleData(ts);
            }
public float brakingActivationSpeed
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".brakingActivationSpeed").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".brakingActivationSpeed", value.AsString());
          }
       }
public float brakingForce
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".brakingForce").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".brakingForce", value.AsString());
          }
       }
public float dragForce
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".dragForce").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".dragForce", value.AsString());
          }
       }
public coParticleEmitterData dustTrailEmitter
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".dustTrailEmitter");
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".dustTrailEmitter", value.ToString());
          }
       }
public float dustTrailFreqMod
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".dustTrailFreqMod").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".dustTrailFreqMod", value.AsString());
          }
       }
public Point3F dustTrailOffset
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".dustTrailOffset").AsPoint3F();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".dustTrailOffset", value.AsString());
          }
       }
public coSFXProfile engineSound
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".engineSound");
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".engineSound", value.ToString());
          }
       }
public float floatingGravMag
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".floatingGravMag").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".floatingGravMag", value.AsString());
          }
       }
public float floatingThrustFactor
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".floatingThrustFactor").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".floatingThrustFactor", value.AsString());
          }
       }
public coSFXProfile floatSound
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".floatSound");
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".floatSound", value.ToString());
          }
       }
public coParticleEmitterData forwardJetEmitter
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".forwardJetEmitter");
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".forwardJetEmitter", value.ToString());
          }
       }
public float gyroDrag
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".gyroDrag").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".gyroDrag", value.AsString());
          }
       }
public coSFXProfile jetSound
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".jetSound");
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".jetSound", value.ToString());
          }
       }
public float mainThrustForce
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".mainThrustForce").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".mainThrustForce", value.AsString());
          }
       }
public float normalForce
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".normalForce").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".normalForce", value.AsString());
          }
       }
public float pitchForce
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".pitchForce").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".pitchForce", value.AsString());
          }
       }
public float restorativeForce
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".restorativeForce").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".restorativeForce", value.AsString());
          }
       }
public float reverseThrustForce
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".reverseThrustForce").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".reverseThrustForce", value.AsString());
          }
       }
public float rollForce
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".rollForce").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".rollForce", value.AsString());
          }
       }
public float stabDampingConstant
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".stabDampingConstant").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stabDampingConstant", value.AsString());
          }
       }
public float stabLenMax
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".stabLenMax").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stabLenMax", value.AsString());
          }
       }
public float stabLenMin
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".stabLenMin").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stabLenMin", value.AsString());
          }
       }
public float stabSpringConstant
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".stabSpringConstant").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stabSpringConstant", value.AsString());
          }
       }
public float steeringForce
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".steeringForce").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".steeringForce", value.AsString());
          }
       }
public float strafeThrustForce
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".strafeThrustForce").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".strafeThrustForce", value.AsString());
          }
       }
public float triggerTrailHeight
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".triggerTrailHeight").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".triggerTrailHeight", value.AsString());
          }
       }
public float turboFactor
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".turboFactor").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".turboFactor", value.AsString());
          }
       }
public float vertFactor
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".vertFactor").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".vertFactor", value.AsString());
          }
       }
}}
