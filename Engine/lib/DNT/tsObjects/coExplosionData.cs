
// Copyright (C) 2012 Winterleaf Entertainment L,L,C.
// 
// THE SOFTW ARE IS PROVIDED ON AN “ AS IS” BASIS, WITHOUT W ARRANTY OF ANY KIND,
// INCLUDING WITHOUT LIMIT ATION THE W ARRANTIES OF MERCHANT ABILITY, FITNESS
// FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT . THE ENTIRE RISK AS TO THE
// QUALITY AND PERFORMANCE OF THE SOFTW ARE IS THE RESPONSIBILITY OF LICENSEE.
// SHOULD THE SOFTW ARE PROVE DEFECTIVE IN ANY RESPECT , LICENSEE AND NOT LICEN -
// SOR OR ITS SUPPLIERS OR RESELLERS ASSUMES THE ENTIRE COST OF AN Y SERVICE AND
// REPAIR. THIS DISCLAIMER OF W ARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS
// AGREEMENT. NO USE OF THE SOFTW ARE IS AUTHORIZED HEREUNDER EXCEPT UNDER
// THIS DISCLAIMER.
// 
// The use of the WinterLeaf Entertainment LLC DotNetT orque (“DNT ”) and DotNetT orque
// Customizer (“DNTC”)is governed by this license agreement (“ Agreement”).
// 
// R E S T R I C T I O N S
// 
// (a) Licensee may not: (i) create any derivative works of DNTC, including but not
// limited to translations, localizations, technology add-ons, or game making software
// other than Games; (ii) reverse engineer , or otherwise attempt to derive the algorithms
// for DNT or DNTC (iii) redistribute, encumber , sell, rent, lease, sublicense, or otherwise
// transfer rights to  DNTC; or (iv) remove or alter any tra demark, logo, copyright
// or other proprietary notices, legends, symbols or labels in DNT or DNTC; or (iiv) use
// the Software to develop or distribute any software that compete s with the Software
// without WinterLeaf Entertainment’s prior written consent; or (i iiv) use the Software for
// any illegal purpose.
// (b) Licensee may not distribute the DNTC in any manner.
// 
// LI C E N S E G R A N T .
// This license allows companies of any size, government entities or individuals to cre -
// ate, sell, rent, lease, or otherwise profit commercially from, games using executables
// created from the source code of DNT
// 
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// THE SOURCE CODE GENERATED BY DNTC CAN BE  DISTRIBUTED PUBLICLY PROVIDED THAT THE 
// DISTRIBUTOR PROVIDES  THE GENERATE SOURCE CODE FREE OF CHARGE.
// 
// THIS SOURCE CODE (DNT) CAN BE DISTRIBUTED PUBLICLY PROVIDED THAT THE DISTRIBUTOR 
// PROVIDES  THE SOURCE CODE (DNT) FREE OF CHARGE.
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// 
// Please visit http://www.winterleafentertainment.com for more information about the project and latest updates.

#region
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using WinterLeaf.Classes;
using WinterLeaf.Containers;
using WinterLeaf.Enums;
using System.ComponentModel;
#endregion

namespace WinterLeaf.tsObjects
    {
    /// <summary>
    /// 
    /// </summary>
    internal class tsObjectConvertercoExplosionData : TypeConverter
        {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="sourceType"></param>
        /// <returns></returns>
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
            {
            return (typeof(string) == sourceType);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="culture"></param>
        /// <param name="value"></param>
        /// <returns></returns>
        public override object ConvertFrom(ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value)
            {
            if (value is string)
                {
                return new coExplosionData(value as string);
                }

            return null;
            }
        }

      
    /// <summary>
    /// 
    /// </summary>
    [TypeConverter(typeof(tsObjectConvertercoExplosionData))]
    public class coExplosionData: coGameBaseData
{
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
public coExplosionData(string simobjectid) : base(simobjectid){ }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
public coExplosionData(uint simobjectid): base(simobjectid){ }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
public coExplosionData(int simobjectid): base(simobjectid){ }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator ==(coExplosionData ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return object.ReferenceEquals(simobjectid, null);
            return ts.Equals(simobjectid);


            }
  /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public override int GetHashCode()
            {
            throw new NotImplementedException();
            }
  /// <summary>
        /// 
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        public override bool Equals(object obj)
            {
            
            return (this._mSimObjectId ==(string)myReflections.ChangeType( obj,typeof(string)));
            }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator !=(coExplosionData ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return !object.ReferenceEquals(simobjectid, null);
            return !ts.Equals(simobjectid);

            }


            /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator string( coExplosionData ts)
            {
            return ts._mSimObjectId;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coExplosionData(string ts)
            {
            return new coExplosionData(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator int( coExplosionData ts)
            {
            int i;
            return int.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coExplosionData(int ts)
            {
            return new coExplosionData(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator uint( coExplosionData ts)
            {
            uint i;
            return uint.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coExplosionData(uint ts)
            {
            return new coExplosionData(ts);
            }
public Point3F camShakeAmp
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".camShakeAmp").AsPoint3F();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".camShakeAmp", value.AsString());
          }
       }
public float camShakeDuration
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".camShakeDuration").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".camShakeDuration", value.AsString());
          }
       }
public float camShakeFalloff
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".camShakeFalloff").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".camShakeFalloff", value.AsString());
          }
       }
public Point3F camShakeFreq
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".camShakeFreq").AsPoint3F();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".camShakeFreq", value.AsString());
          }
       }
public float camShakeRadius
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".camShakeRadius").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".camShakeRadius", value.AsString());
          }
       }
public coDebrisData debris
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".debris");
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".debris", value.ToString());
          }
       }
public int debrisNum
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".debrisNum").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".debrisNum", value.AsString());
          }
       }
public int debrisNumVariance
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".debrisNumVariance").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".debrisNumVariance", value.AsString());
          }
       }
public float debrisPhiMax
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".debrisPhiMax").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".debrisPhiMax", value.AsString());
          }
       }
public float debrisPhiMin
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".debrisPhiMin").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".debrisPhiMin", value.AsString());
          }
       }
public float debrisThetaMax
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".debrisThetaMax").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".debrisThetaMax", value.AsString());
          }
       }
public float debrisThetaMin
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".debrisThetaMin").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".debrisThetaMin", value.AsString());
          }
       }
public float debrisVelocity
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".debrisVelocity").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".debrisVelocity", value.AsString());
          }
       }
public float debrisVelocityVariance
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".debrisVelocityVariance").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".debrisVelocityVariance", value.AsString());
          }
       }
public int delayMS
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".delayMS").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".delayMS", value.AsString());
          }
       }
public int delayVariance
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".delayVariance").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".delayVariance", value.AsString());
          }
       }
public coParticleEmitterData emitter
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".emitter");
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".emitter", value.ToString());
          }
       }
public Point3F explosionScale
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".explosionScale").AsPoint3F();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".explosionScale", value.AsString());
          }
       }
public String explosionShape
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".explosionShape").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".explosionShape", value.AsString());
          }
       }
public bool faceViewer
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".faceViewer").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".faceViewer", value.AsString());
          }
       }
public int lifetimeMS
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".lifetimeMS").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".lifetimeMS", value.AsString());
          }
       }
public int lifetimeVariance
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".lifetimeVariance").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".lifetimeVariance", value.AsString());
          }
       }
public float lightEndBrightness
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".lightEndBrightness").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".lightEndBrightness", value.AsString());
          }
       }
public ColorF lightEndColor
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".lightEndColor").AsColorF();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".lightEndColor", value.AsString());
          }
       }
public float lightEndRadius
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".lightEndRadius").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".lightEndRadius", value.AsString());
          }
       }
public float lightNormalOffset
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".lightNormalOffset").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".lightNormalOffset", value.AsString());
          }
       }
public float lightStartBrightness
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".lightStartBrightness").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".lightStartBrightness", value.AsString());
          }
       }
public ColorF lightStartColor
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".lightStartColor").AsColorF();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".lightStartColor", value.AsString());
          }
       }
public float lightStartRadius
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".lightStartRadius").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".lightStartRadius", value.AsString());
          }
       }
public float offset
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".offset").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".offset", value.AsString());
          }
       }
public int particleDensity
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".particleDensity").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".particleDensity", value.AsString());
          }
       }
public coParticleEmitterData particleEmitter
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".particleEmitter");
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".particleEmitter", value.ToString());
          }
       }
public float particleRadius
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".particleRadius").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".particleRadius", value.AsString());
          }
       }
public float playSpeed
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".playSpeed").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".playSpeed", value.AsString());
          }
       }
public bool shakeCamera
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".shakeCamera").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".shakeCamera", value.AsString());
          }
       }
public Point3F sizes
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".sizes").AsPoint3F();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".sizes", value.AsString());
          }
       }
public coSFXTrack soundProfile
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".soundProfile");
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".soundProfile", value.ToString());
          }
       }
public coExplosionData subExplosion
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".subExplosion");
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".subExplosion", value.ToString());
          }
       }
public float times
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".times").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".times", value.AsString());
          }
       }
}}
