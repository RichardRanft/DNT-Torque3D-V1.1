
// Copyright (C) 2012 Winterleaf Entertainment L,L,C.
// 
// THE SOFTW ARE IS PROVIDED ON AN “ AS IS” BASIS, WITHOUT W ARRANTY OF ANY KIND,
// INCLUDING WITHOUT LIMIT ATION THE W ARRANTIES OF MERCHANT ABILITY, FITNESS
// FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT . THE ENTIRE RISK AS TO THE
// QUALITY AND PERFORMANCE OF THE SOFTW ARE IS THE RESPONSIBILITY OF LICENSEE.
// SHOULD THE SOFTW ARE PROVE DEFECTIVE IN ANY RESPECT , LICENSEE AND NOT LICEN -
// SOR OR ITS SUPPLIERS OR RESELLERS ASSUMES THE ENTIRE COST OF AN Y SERVICE AND
// REPAIR. THIS DISCLAIMER OF W ARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS
// AGREEMENT. NO USE OF THE SOFTW ARE IS AUTHORIZED HEREUNDER EXCEPT UNDER
// THIS DISCLAIMER.
// 
// The use of the WinterLeaf Entertainment LLC DotNetT orque (“DNT ”) and DotNetT orque
// Customizer (“DNTC”)is governed by this license agreement (“ Agreement”).
// 
// R E S T R I C T I O N S
// 
// (a) Licensee may not: (i) create any derivative works of DNTC, including but not
// limited to translations, localizations, technology add-ons, or game making software
// other than Games; (ii) reverse engineer , or otherwise attempt to derive the algorithms
// for DNT or DNTC (iii) redistribute, encumber , sell, rent, lease, sublicense, or otherwise
// transfer rights to  DNTC; or (iv) remove or alter any tra demark, logo, copyright
// or other proprietary notices, legends, symbols or labels in DNT or DNTC; or (iiv) use
// the Software to develop or distribute any software that compete s with the Software
// without WinterLeaf Entertainment’s prior written consent; or (i iiv) use the Software for
// any illegal purpose.
// (b) Licensee may not distribute the DNTC in any manner.
// 
// LI C E N S E G R A N T .
// This license allows companies of any size, government entities or individuals to cre -
// ate, sell, rent, lease, or otherwise profit commercially from, games using executables
// created from the source code of DNT
// 
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// THE SOURCE CODE GENERATED BY DNTC CAN BE  DISTRIBUTED PUBLICLY PROVIDED THAT THE 
// DISTRIBUTOR PROVIDES  THE GENERATE SOURCE CODE FREE OF CHARGE.
// 
// THIS SOURCE CODE (DNT) CAN BE DISTRIBUTED PUBLICLY PROVIDED THAT THE DISTRIBUTOR 
// PROVIDES  THE SOURCE CODE (DNT) FREE OF CHARGE.
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// 
// Please visit http://www.winterleafentertainment.com for more information about the project and latest updates.

#region
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using WinterLeaf.Classes;
using WinterLeaf.Containers;
using WinterLeaf.Enums;
using System.ComponentModel;
#endregion

namespace WinterLeaf.Enums
    {
public enum  ConsoleLogEntry__Level{ Normal = 0, Warning, Error, NUM_CLASS };
public enum  OggTheoraDecoder__ETranscoder{ TRANSCODER_Auto, TRANSCODER_Generic, TRANSCODER_SSE2420RGBA, };
public enum  ForestBrushTool__BrushMode{ Paint = 0, Erase, EraseSelected };
public enum  GFXTextureArgument{ GFXTA_FIRST = 0, GFXTADiffuse = 0, GFXTACurrent, GFXTATexture, GFXTATFactor, GFXTASpecular, GFXTATemp, GFXTAConstant, GFXTA_COUNT, GFXTAComplement = 0x00000010, GFXTAAlphaReplicate = 0x00000020, };
public enum  GuiBitmapButtonCtrl__BitmapMode{ BitmapStretched, BitmapCentered, };
public enum  GuiButtonBaseCtrl__ButtonType{ ButtonTypePush, ButtonTypeCheck, ButtonTypeRadio, };
public enum  GuiIconButtonCtrl__TextLocation{ TextLocNone, TextLocBottom, TextLocRight, TextLocTop, TextLocLeft, TextLocCenter, };
public enum  GuiIconButtonCtrl__IconLocation{ IconLocNone, IconLocLeft, IconLocRight, IconLocCenter  };
public enum  GuiAutoScrollCtrl__Direction{ Up, Down, Left, Right };
public enum  GuiFrameSetCtrl__FrameState{ FRAME_STATE_ON, FRAME_STATE_OFF, FRAME_STATE_AUTO,  NO_HIT = -1, DEFAULT_BORDER_WIDTH = 4, DEFAULT_COLUMNS = 1, DEFAULT_ROWS = 1, DEFAULT_MIN_FRAME_EXTENT = 64 };
public enum  GuiScrollCtrl__ScrollBarBehavior{ ScrollBarAlwaysOn = 0, ScrollBarAlwaysOff = 1, ScrollBarDynamic = 2 };
public enum  GuiSplitContainer__Orientation{ Vertical = 0, Horizontal = 1 };
public enum  GuiSplitContainer__FixedPanel{ None = 0, FirstPanel = 1, SecondPanel };
public enum  GuiStackControl__StackingType{ stackingTypeVert, stackingTypeHoriz, stackingTypeDyn };
public enum  GuiStackControl__HorizontalType{ horizStackLeft = 0, horizStackRight, };
public enum  GuiStackControl__VerticalType{ vertStackTop, vertStackBottom, };
public enum  GuiTabBookCtrl__TabPosition{ AlignTop, AlignBottom };
public enum  GuiColorPickerCtrl__PickMode{ pPallet = 0,		 pHorizColorRange,		 pVertColorRange,		 pHorizColorBrightnessRange, pVertColorBrightnessRange, pBlendColorRange,		 pHorizAlphaRange,		 pVertAlphaRange,		 pDropperBackground		 };
public enum  GuiGradientCtrl__PickMode{		pHorizColorRange,				pHorizAlphaRange,		 };
public enum  GuiControl__horizSizingOptions{ horizResizeRight = 0, horizResizeWidth, horizResizeLeft, horizResizeCenter, horizResizeRelative, horizResizeWindowRelative };
public enum  GuiControl__vertSizingOptions{ vertResizeBottom = 0, vertResizeHeight, vertResizeTop, vertResizeCenter, vertResizeRelative, vertResizeWindowRelative };
public enum  Docking__DockingType: uint { dockNone = 0x00000000, dockClient = 0x00000001, dockTop = 0x00000002, dockBottom = 0x00000004, dockLeft = 0x00000008, dockRight = 0x00000010, dockInvalid = 0x00000020, dockAny = dockClient | dockTop | dockBottom | dockLeft | dockRight };
public enum  GuiControlProfile__AlignmentType{ LeftJustify, RightJustify, CenterJustify, TopJustify, BottomJustify };
public enum  GuiSeparatorCtrl__separatorTypeOptions{ separatorTypeVertical = 0, separatorTypeHorizontal };
public enum  GizmoMode{ NoneMode = 0, MoveMode, RotateMode, ScaleMode, ModeEnumCount };
public enum  GizmoAlignment{ World = 0, Object, AlignEnumCount};
public enum  WorldEditor__DropType{ DropAtOrigin = 0, DropAtCamera, DropAtCameraWithRot, DropBelowCamera, DropAtScreenCenter, DropAtCentroid, DropToTerrain, DropBelowSelection };
public enum  Material__BlendOp{ None = 0, Mul, Add, AddAlpha, Sub, LerpAlpha, ToneMap, NumBlendTypes };
public enum  Material__AnimType{ Scroll = 1, Rotate = 2, Wave = 4, Scale = 8, Sequence = 16, };
public enum  Material__WaveType{ Sin = 0, Triangle, Square, };
public enum  FontCharset{ TGE_ANSI_CHARSET = 0, TGE_SYMBOL_CHARSET, TGE_SHIFTJIS_CHARSET, TGE_HANGEUL_CHARSET, TGE_HANGUL_CHARSET, TGE_GB2312_CHARSET, TGE_CHINESEBIG5_CHARSET, TGE_OEM_CHARSET, TGE_JOHAB_CHARSET, TGE_HEBREW_CHARSET, TGE_ARABIC_CHARSET, TGE_GREEK_CHARSET, TGE_TURKISH_CHARSET, TGE_VIETNAMESE_CHARSET, TGE_THAI_CHARSET, TGE_EASTEUROPE_CHARSET, TGE_RUSSIAN_CHARSET, TGE_MAC_CHARSET, TGE_BALTIC_CHARSET};
public enum  PFXRenderTime{ PFXBeforeBin, PFXAfterBin, PFXAfterDiffuse, PFXEndOfFrame, PFXTexGenOnDemand};
public enum  PFXTargetClear{ PFXTargetClear_None, PFXTargetClear_OnCreate, PFXTargetClear_OnDraw,};
public enum  ParticleRenderInst__BlendStyle{ BlendUndefined = 0, BlendNormal, BlendAdditive, BlendSubtractive, BlendPremultAlpha, BlendGreyscale, BlendStyle_COUNT, };
public enum  Marker__SmoothingType{ SmoothingTypeLinear, SmoothingTypeSpline, SmoothingTypeAccelerate, };
public enum  Marker__KnotType{ KnotTypeNormal, KnotTypePositionOnly, KnotTypeKink, };
public enum  SFXChannel{ SFXChannelVolume, SFXChannelPitch, SFXChannelPriority, SFXChannelPositionX, SFXChannelPositionY, SFXChannelPositionZ, SFXChannelRotationX, SFXChannelRotationY, SFXChannelRotationZ, SFXChannelVelocityX, SFXChannelVelocityY, SFXChannelVelocityZ, SFXChannelMinDistance, SFXChannelMaxDistance, SFXChannelConeInsideAngle, SFXChannelConeOutsideAngle, SFXChannelConeOutsideVolume, SFXChannelCursor, SFXChannelStatus, SFXChannelUser0, SFXChannelUser1, SFXChannelUser2, SFXChannelUser3,  SFX_NUM_CHANNELS};
public enum  SFXPlayList__ELoopMode{ LOOP_All, LOOP_Single, };
public enum  SFXPlayList__ERandomMode{ RANDOM_NotRandom,  RANDOM_StrictRandom,  RANDOM_OrderedRandom, };
public enum  SFXPlayList__ETransitionMode{ TRANSITION_None, TRANSITION_Wait,  TRANSITION_WaitAll, TRANSITION_Stop,  TRANSITION_StopAll, };
public enum  SFXPlayList__EReplayMode{ REPLAY_IgnorePlaying,  REPLAY_RestartPlaying,  REPLAY_KeepPlaying,  REPLAY_StartNew, REPLAY_SkipIfPlaying, };
public enum  SFXPlayList__EStateMode{ STATE_StopInactive,  STATE_PauseInactive,  STATE_IgnoreInactive, };
public enum  Item__LightType{ NoLight = 0, ConstantLight, PulsingLight, NumLightTypes, };
public enum  ShapeBaseImageData__LightType{ NoLight = 0, ConstantLight, SpotLight, PulsingLight, WeaponFireLight, NumLightTypes };
public enum  ShapeBaseImageData__StateData__LoadedState{ IgnoreLoaded, Loaded, NotLoaded, NumLoadedBits = 3 };
public enum  ShapeBaseImageData__StateData__SpinState{ IgnoreSpin, NoSpin, SpinUp, SpinDown, FullSpin, NumSpinBits = 3 };
public enum  ShapeBaseImageData__StateData__RecoilState{ NoRecoil, LightRecoil, MediumRecoil, HeavyRecoil, NumRecoilBits = 3 };
public enum  PhysicsShapeData__SimType{ SimType_ClientOnly, SimType_ServerOnly, SimType_ClientServer, SimType_Bits = 3, };
public enum  TurretShapeData__FireLinkType{ FireTogether, GroupedFire, IndividualFire, NumFireLinkTypeBits = 2 };
public enum  ColladaUtils__ImportOptions__eLodType{ DetectDTS = 0, SingleSize, TrailingNumber, NumLodTypes };
public enum  TypeGFXBlend{ GFXBlendZero,  GFXBlendOne,  GFXBlendSrcColor,  GFXBlendInvSrcColor,  GFXBlendSrcAlpha,  GFXBlendInvSrcAlpha,  GFXBlendDestAlpha,  GFXBlendInvDestAlpha,  GFXBlendDestColor,  GFXBlendInvDestColor,  GFXBlendSrcAlphaSat, };
public enum  TypeGFXCmpFunc{ GFXCmpNever ,  GFXCmpLess ,  GFXCmpEqual ,  GFXCmpLessEqual ,  GFXCmpGreater ,  GFXCmpNotEqual ,  GFXCmpGreaterEqual ,  GFXCmpAlways , };
public enum  TypeGFXTextureAddressMode{          GFXAddressWrap ,         GFXAddressMirror ,          GFXAddressClamp ,         GFXAddressBorder ,     GFXAddressMirrorOnce , };
public enum  TypeGFXTextureFilterType{    GFXTextureFilterNone ,    GFXTextureFilterPoint ,   GFXTextureFilterLinear ,  GFXTextureFilterAnisotropic ,  GFXTextureFilterPyramidalQuad ,  GFXTextureFilterGaussianQuad , };
public enum  TypeGFXTextureOp{ GFXTOPDisable ,  GFXTOPSelectARG1 ,  GFXTOPSelectARG2 ,  GFXTOPModulate ,  GFXTOPModulate2X ,  GFXTOPModulate4X ,  GFXTOPAdd ,  GFXTOPAddSigned ,  GFXTOPAddSigned2X ,  GFXTOPSubtract ,  GFXTOPAddSmooth ,  GFXTOPBlendDiffuseAlpha ,  GFXTOPBlendTextureAlpha ,  GFXTOPBlendFactorAlpha ,  GFXTOPBlendTextureAlphaPM ,  GFXTOPBlendCURRENTALPHA ,  GFXTOPPreModulate ,  GFXTOPModulateAlphaAddColor ,  GFXTOPModulateColorAddAlpha ,  GFXTOPModulateInvAlphaAddColor ,  GFXTOPModulateInvColorAddAlpha ,  GFXTOPBumpEnvMap ,  GFXTOPBumpEnvMapLuminance ,  GFXTOPDotProduct3 ,  GFXTOPLERP , };
public enum  TypeGFXTextureArgument{ GFXTADiffuse ,  GFXTACurrent ,  GFXTATexture ,  GFXTATFactor ,  GFXTASpecular ,  GFXTATemp ,  GFXTAConstant ,  OneMinus ,  AlphaReplicate , };
public enum  TypeGFXTextureTransformFlags{ GFXTTFDisable ,  GFXTTFFCoord1D ,  GFXTTFFCoord2D ,  GFXTTFFCoord3D ,  GFXTTFFCoord4D ,  GFXTTFProjected , };
public enum  TypeGFXFormat{ GFXFormatR8G8B8 ,  GFXFormatR8G8B8A8 ,  GFXFormatR8G8B8X8 ,  GFXFormatR32F ,  GFXFormatR5G6B5 ,  GFXFormatR5G5B5A1 ,  GFXFormatR5G5B5X1 ,  GFXFormatA4L4 ,  GFXFormatA8L8 ,  GFXFormatA8 ,  GFXFormatL8 ,  GFXFormatDXT1 ,  GFXFormatDXT2 ,  GFXFormatDXT3 ,  GFXFormatDXT4 ,  GFXFormatDXT5 ,  GFXFormatD32 ,  GFXFormatD24X8 ,  GFXFormatD24S8 ,  GFXFormatD24FS8 ,  GFXFormatD16 ,  GFXFormatR32G32B32A32F ,  GFXFormatR16G16B16A16F ,  GFXFormatL16 ,  GFXFormatR16G16B16A16 ,  GFXFormatR16G16 ,  GFXFormatR16F ,  GFXFormatR16G16F ,  GFXFormatR10G10B10A2 , };
public enum  TypeGFXCullMode{ GFXCullNone ,  GFXCullCW ,  GFXCullCCW , };
public enum  TypeGFXStencilOp{ GFXStencilOpKeep ,  GFXStencilOpZero ,  GFXStencilOpReplace ,  GFXStencilOpIncrSat ,  GFXStencilOpDecrSat ,  GFXStencilOpInvert ,  GFXStencilOpIncr ,  GFXStencilOpDecr , };
public enum  TypeGFXBlendOp{ GFXBlendOpAdd ,  GFXBlendOpSubtract ,  GFXBlendOpRevSubtract ,  GFXBlendOpMin ,  GFXBlendOpMax , };
public enum  TypeSFXDistanceModel{ Linear,  Logarithmic, };
public enum  TypeTSMeshType{          None,         Bounds,  CollisionMesh,    VisibleMesh, };
public enum  PxClothAttachment{};
}
